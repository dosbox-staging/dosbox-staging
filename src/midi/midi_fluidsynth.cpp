/*
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *
 *  Copyright (C) 2002-2011  The DOSBox Team
 *  Copyright (C) 2020       Nikos Chantziaras <realnc@gmail.com>
 *  Copyright (C) 2020       The dosbox-staging team
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with this program; if not, write to the Free Software Foundation, Inc.,
 *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

#include "midi_fluidsynth.h"

#if C_FLUIDSYNTH

#include <cassert>
#include <string>

#include "control.h"
#include "cross.h"

MidiHandlerFluidsynth MidiHandlerFluidsynth::instance;

static void init_fluid_dosbox_settings(Section_prop &secprop)
{
	constexpr auto when_idle = Property::Changeable::WhenIdle;

	auto *str_prop = secprop.Add_string("soundfont", when_idle, "");
	str_prop->Set_help(
	        "Path to a SoundFont file in .sf2 format to use with FluidSynth.");

	// TODO Handle storing soundfonts in specific directory and update
	// the documentation; right now users need to specify full path or
	// fall on undecumented FluidSynth internal algorithm for picking
	// sf2 files.

	auto *int_prop = secprop.Add_int("fluid_rate", when_idle, 44100);
	int_prop->SetMinMax(8000, 96000);
	int_prop->Set_help(
	        "The sample rate of the audio generated by the synthesizer.\n"
	        "(min 8000, max 96000)");

	int_prop = secprop.Add_int("synth_threads", when_idle, 1);
	int_prop->SetMinMax(1, 256);
	int_prop->Set_help(
	        "If set to a value greater than 1, then additional synthesis\n"
	        "threads will be created to take advantage of many CPU cores.\n"
	        "(min 1, max 256)");
}

bool MidiHandlerFluidsynth::Open(MAYBE_UNUSED const char *conf)
{
	Close();

	fluid_settings_ptr_t fluid_settings(new_fluid_settings(),
	                                    delete_fluid_settings);
	if (!fluid_settings) {
		LOG_MSG("MIDI: new_fluid_settings failed");
		return false;
	}

	auto *section = static_cast<Section_prop *>(control->GetSection("fluidsynth"));

	// Detailed explanation of all available FluidSynth settings:
	// http://www.fluidsynth.org/api/fluidsettings.xml

	const int sample_rate = section->Get_int("fluid_rate");
	fluid_settings_setnum(fluid_settings.get(), "synth.sample-rate", sample_rate);

	const int cpu_cores = section->Get_int("synth_threads");
	fluid_settings_setint(fluid_settings.get(), "synth.cpu-cores", cpu_cores);

	fsynth_ptr_t fluid_synth(new_fluid_synth(fluid_settings.get()),
	                         delete_fluid_synth);
	if (!fluid_synth) {
		LOG_MSG("MIDI: Failed to create the FluidSynth synthesizer");
		return false;
	}

	std::string soundfont = section->Get_string("soundfont");
	Cross::ResolveHomedir(soundfont);
	if (!soundfont.empty() && fluid_synth_sfcount(fluid_synth.get()) == 0) {
		fluid_synth_sfload(fluid_synth.get(), soundfont.data(), true);
	}

	DEBUG_LOG_MSG("MIDI: FluidSynth loaded %d SoundFont files",
	              fluid_synth_sfcount(fluid_synth.get()));

	mixer_channel_ptr_t mixer_channel(MIXER_AddChannel(mixer_callback,
	                                                   sample_rate, "FSYNTH"),
	                                  MIXER_DelChannel);
	mixer_channel->Enable(true);

	settings = std::move(fluid_settings);
	synth = std::move(fluid_synth);
	channel = std::move(mixer_channel);
	is_open = true;
	return true;
}

void MidiHandlerFluidsynth::Close()
{
	if (!is_open)
		return;

	channel->Enable(false);
	channel = nullptr;
	synth = nullptr;
	settings = nullptr;
	is_open = false;
}

void MidiHandlerFluidsynth::PlayMsg(const uint8_t *msg)
{
	const int chanID = msg[0] & 0b1111;

	switch (msg[0] & 0b1111'0000) {
	case 0b1000'0000:
		fluid_synth_noteoff(synth.get(), chanID, msg[1]);
		break;
	case 0b1001'0000:
		fluid_synth_noteon(synth.get(), chanID, msg[1], msg[2]);
		break;
	case 0b1010'0000:
		fluid_synth_key_pressure(synth.get(), chanID, msg[1], msg[2]);
		break;
	case 0b1011'0000:
		fluid_synth_cc(synth.get(), chanID, msg[1], msg[2]);
		break;
	case 0b1100'0000:
		fluid_synth_program_change(synth.get(), chanID, msg[1]);
		break;
	case 0b1101'0000:
		fluid_synth_channel_pressure(synth.get(), chanID, msg[1]);
		break;
	case 0b1110'0000:
		fluid_synth_pitch_bend(synth.get(), chanID, msg[1] + (msg[2] << 7));
		break;
	default: {
		uint64_t tmp;
		memcpy(&tmp, msg, sizeof(tmp));
		LOG_MSG("MIDI: unknown MIDI command: %0" PRIx64, tmp);
		break;
	}
	}
}

void MidiHandlerFluidsynth::PlaySysex(uint8_t *sysex, size_t len)
{
	const char *data = reinterpret_cast<const char *>(sysex);
	const auto n = static_cast<int>(len);
	fluid_synth_sysex(synth.get(), data, n, nullptr, nullptr, nullptr, false);
}

void MidiHandlerFluidsynth::mixer_callback(uint16_t frames)
{
	constexpr uint16_t expected_max_frames = (96000 / 1000) + 4;
	int16_t data[expected_max_frames * 2]; // two channels per frame
	while (frames > 0) {
		const uint16_t len = std::min(frames, expected_max_frames);
		fluid_synth_write_s16(instance.synth.get(), len, data, 0, 2,
		                      data, 1, 2);
		instance.channel->AddSamples_s16(len, data);
		frames -= len;
	}
}

static void fluid_destroy(MAYBE_UNUSED Section *sec)
{}

static void fluid_init(Section *sec)
{
	sec->AddDestroyFunction(&fluid_destroy, true);
}

void FLUID_AddConfigSection(Config *conf)
{
	assert(conf);
	Section_prop *sec = conf->AddSection_prop("fluidsynth", &fluid_init);
	assert(sec);
	init_fluid_dosbox_settings(*sec);
}

#endif // C_FLUIDSYNTH
