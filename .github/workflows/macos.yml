name: macOS builds

on: [push, pull_request]

env:
  CCACHE_DIR:      "${{ github.workspace }}/.ccache"
  CCACHE_MAXSIZE:  "64M"
  CCACHE_COMPRESS: "true"
  CLAMDB_DIR:      "/usr/local/Cellar/clamav"

jobs:
  build_macos:
    name: ${{ matrix.conf.name }}
    runs-on: macos-latest
    if: github.event_name != 'pull_request' || contains('dreamer,kcgen,ant-222,Wengier', github.actor) == false
    strategy:
      matrix:
        conf:
          - name: Clang
            flags: -c clang
            max_warnings: 1
          - name: GCC-9
            flags: -c gcc -v 9
            max_warnings: 54
    steps:
      - uses: actions/checkout@v2
      - name: Install C++ compiler and libraries
        run:  brew install $(./scripts/list-build-dependencies.sh -m brew ${{ matrix.conf.flags}})
      - name:  Prepare compiler cache
        id:    prep-ccache
        shell: bash
        run: |
          mkdir -p "${CCACHE_DIR}"
          echo "::set-output name=dir::$CCACHE_DIR"
          echo "::set-output name=today::$(gdate -I)"
          echo "::set-output name=yesterday::$(gdate --date=yesterday -I)"
      - uses:  actions/cache@v2
        id:    cache-ccache
        with:
          path: ${{ steps.prep-ccache.outputs.dir }}
          key:  ccache-macos-${{ matrix.conf.name }}-${{ steps.prep-ccache.outputs.today }}
          restore-keys: |
            ccache-macos-${{ matrix.conf.name }}-${{ steps.prep-ccache.outputs.yesterday }}
      - name: Log environment
        run:  ./scripts/log-env.sh
      - name: Build
        run:  ./scripts/build.sh --build-type Debug ${{ matrix.conf.flags }} --disable-fluidsynth
      - name: Summarize warnings
        env:
          MAX_WARNINGS: ${{ matrix.conf.max_warnings }}
        run:  python3 ./scripts/count-warnings.py -f build.log

  build_macos_release:
    name: Release build
    runs-on: macos-latest
    if: github.event_name != 'pull_request' || contains('dreamer,kcgen,ant-222,Wengier', github.actor) == false
    env:
      CC: ccache clang
      CXX: ccache clang++
      FLAGS: -DNDEBUG -O3 -fno-math-errno -fstrict-aliasing -march=nehalem -flto=thin -pipe
    steps:
      - uses: actions/checkout@v2
      - name: Install C++ compiler and libraries
        run:  brew install librsvg $(./scripts/list-build-dependencies.sh -m brew -c clang)
      - name:  Prepare compiler cache
        id:    prep-ccache
        shell: bash
        run: |
          mkdir -p "${CCACHE_DIR}"
          echo "::set-output name=dir::$CCACHE_DIR"
          echo "::set-output name=today::$(gdate -I)"
          echo "::set-output name=yesterday::$(gdate --date=yesterday -I)"
      - uses:  actions/cache@v2
        id:    cache-ccache
        with:
          path: ${{ steps.prep-ccache.outputs.dir }}
          key:  ccache-macos-release-${{ steps.prep-ccache.outputs.today }}
          restore-keys: |
            ccache-macos-release-${{ steps.prep-ccache.outputs.yesterday }}
      - name: Log environment
        run:  ./scripts/log-env.sh
      - name: Build FluidSynth library
        run:  cd contrib/static-fluidsynth && gmake
      - name: Build Opus libraries
        run: |
          set -x
          cd contrib/static-opus
          export CFLAGS="$FLAGS"
          export CXXFLAGS="$FLAGS"
          gmake -j "$(sysctl -n hw.physicalcpu)"
      - name: Inject version string
        run: |
          set -x
          git fetch --prune --unshallow
          export VERSION=$(git describe --abbrev=5)
          sed -i -e "s/AC_INIT(dosbox,git)/AC_INIT(dosbox,$VERSION)/" configure.ac
          echo ::set-env name=VERSION::$VERSION
      - name: Build
        env:
          FLUIDSYNTH_CFLAGS: -I${{ github.workspace }}/contrib/static-fluidsynth/include
          FLUIDSYNTH_LIBS: ${{ github.workspace }}/contrib/static-fluidsynth/lib/libfluidsynth.a -lm
          OPUSFILE_CFLAGS: -I${{ github.workspace }}/contrib/static-opus/include -I${{ github.workspace }}/contrib/static-opus/include/opus
          OPUSFILE_LIBS: ${{ github.workspace }}/contrib/static-opus/lib/libopusfile.a ${{ github.workspace }}/contrib/static-opus/lib/libogg.a ${{ github.workspace }}/contrib/static-opus/lib/libopus.a -lm
        run: |
          set -x
          ./autogen.sh
          ./configure \
            --enable-png-static \
            --enable-sdl-static \
            CFLAGS="$FLAGS" CXXFLAGS="$FLAGS"
          gmake -j "$(sysctl -n hw.physicalcpu)"
          strip src/dosbox
          otool -L src/dosbox
      - name: Package
        run: |
          set -x

          # Generate icon
          make -C contrib/icons/ dosbox-staging.icns

          dst=dist/dosbox-staging.app/Contents

          # Prepare content
          install -d "$dst/MacOS/"
          install -d "$dst/Resources/"
          install -d "$dst/SharedSupport/"

          install        "src/dosbox"                        "$dst/MacOS/"
          install -m 644 "contrib/macos/Info.plist.template" "$dst/Info.plist"
          install -m 644 "contrib/macos/PkgInfo"             "$dst/PkgInfo"
          install -m 644 "contrib/icons/dosbox-staging.icns" "$dst/Resources/"
          install -m 644 "docs/README.template"              "$dst/SharedSupport/README"
          install -m 644 "COPYING"                           "$dst/SharedSupport/COPYING"
          install -m 644 "README"                            "$dst/SharedSupport/manual.txt"
          install -m 644 "docs/README.video"                 "$dst/SharedSupport/video.txt"

          # Inventory the brew dependencies residing in /usr/local
          gthread="/usr/local/opt/glib/lib/libgthread-2.0.0.dylib"
          glib="/usr/local/opt/glib/lib/libglib-2.0.0.dylib"
          glib_cellar="/usr/local/Cellar/glib/2.66.0/lib/libglib-2.0.0.dylib"
          intl="/usr/local/opt/gettext/lib/libintl.8.dylib"
          pcre="/usr/local/opt/pcre/lib/libpcre.1.dylib"

          # Bundle brew dependencies along-side the dosbox executable
          install -m 644 "$gthread" "$dst/MacOS/"
          install -m 644 "$glib"    "$dst/MacOS/"
          install -m 644 "$intl"    "$dst/MacOS/"
          install -m 644 "$pcre"    "$dst/MacOS/"
          install_name_tool -change "$glib_cellar" "@executable_path/${glib##*/}"    "$dst/MacOS/${gthread##*/}"
          install_name_tool -change "$intl"        "@executable_path/${intl##*/}"    "$dst/MacOS/${glib##*/}"
          install_name_tool -change "$pcre"        "@executable_path/${pcre##*/}"    "$dst/MacOS/${glib##*/}"
          install_name_tool -change "$gthread"     "@executable_path/${gthread##*/}" "$dst/MacOS/dosbox"
          install_name_tool -change "$glib"        "@executable_path/${glib##*/}"    "$dst/MacOS/dosbox"
          install_name_tool -change "$intl"        "@executable_path/${intl##*/}"    "$dst/MacOS/dosbox"

          # Perform a stand-alone execution test with /usr/local dependencies temporarily removed
          dep_archive="/tmp/$$-deps.tar"
          tar -cvPf "$dep_archive" "$gthread" "$glib" "$glib_cellar" "$intl" "$pcre"
          rm -f "$gthread" "$glib" "$glib_cellar" "$intl" "$pcre"
          "$dst/MacOS/dosbox" -c exit
          tar -xvPf "$dep_archive" -C /

          # Fill README template file
          sed -i -e "s|%VERSION%|${{ env.VERSION }}|"           "$dst/Info.plist"
          sed -i -e "s|%GIT_COMMIT%|$GITHUB_SHA|"               "$dst/SharedSupport/README"
          sed -i -e "s|%GIT_BRANCH%|${GITHUB_REF#refs/heads/}|" "$dst/SharedSupport/README"
          sed -i -e "s|%GITHUB_REPO%|$GITHUB_REPOSITORY|"       "$dst/SharedSupport/README"

          ln -s /Applications dist/

          hdiutil create \
              -volname "dosbox-staging" \
              -srcfolder dist \
              -ov -format UDZO "dosbox-staging-macOS-${{ env.VERSION }}.dmg"

      - name:  Install Clam AV
        id:    prep-clamdb
        shell: bash
        run: |
          brew install clamav > /dev/null
          clamconf=/usr/local/etc/clamav/freshclam.conf
          mv -f "$clamconf".sample "$clamconf"
          sed -ie 's/^Example/#Example/g' "$clamconf"
          sed -ie 's/30/20000/g' "$clamconf"
          echo "::set-output name=today::$(gdate -I)"
          echo "::set-output name=yesterday::$(gdate --date=yesterday -I)"
      - uses:  actions/cache@v2
        id:    cache-clamdb
        with:
          path: ${{ env.CLAMDB_DIR }}/**/*.cvd
          key:  clamdb-macos-${{ steps.prep-clamdb.outputs.today }}-2
          restore-keys: |
            clamdb-macos-${{ steps.prep-clamdb.outputs.yesterday }}-2

      - name: Clam AV scan
        run: |
          set -x
          freshclam --foreground
          clamscan --heuristic-scan-precedence=yes --recursive --infected .

      - name: Upload disk image
        uses: actions/upload-artifact@v2
        # GitHub automatically zips the artifacts, and there's no option
        # to skip it or upload a file only.
        with:
          name: dosbox-staging-macOS-x86_64
          path: dosbox-staging-macOS-${{ env.VERSION }}.dmg


  publish_additional_artifacts:
    name: Publish additional artifacts
    needs: build_macos_release
    runs-on: macos-latest
    if: github.event_name != 'pull_request' || contains('dreamer,kcgen,ant-222,Wengier', github.actor) == false
    steps:
      - uses: actions/checkout@v2
      - name: Generate changelog
        run: |
          set +x
          git fetch --unshallow
          VERSION=$(git describe --abbrev=4)
          echo ::set-env name=VERSION::$VERSION
          NEWEST_TAG=$(git describe --abbrev=0)
          git log "$NEWEST_TAG..HEAD" > changelog-$VERSION.txt
      - uses: actions/upload-artifact@v2
        with:
          # Keep exactly this artifact name; it's being used to propagate
          # version info via GitHub REST API
          name: changelog-${{ env.VERSION }}.txt
          path: changelog-${{ env.VERSION }}.txt
