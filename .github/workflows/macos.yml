name: macOS builds
permissions: read-all

on:
  push:
    paths-ignore:
      - '.clang-format'
      - '.mdl-styles'
      - '*.md'
      - 'docs/**'
      - 'licenses/**'
      - 'website/**'

  pull_request:
    paths-ignore:
      - '.clang-format'
      - '.mdl-styles'
      - '*.md'
      - 'docs/**'
      - 'licenses/**'
      - 'website/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_macos_release:
    name:    Release build (${{ matrix.conf.arch }})
    runs-on: ${{ matrix.conf.host }}
    if:      github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    env:
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.conf.minimum_deployment }}
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg

    strategy:
      matrix:
        conf:
          - host: macos-15
            arch: x86_64
            minimum_deployment: '11.0'
            max_warnings: 64

          - host: macos-15
            arch: arm64
            minimum_deployment: '11.0'
            max_warnings: 64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Setup CMake
        uses: lukka/get-cmake@ea004816823209b8d1211e47b216185caee12cc5 # v4.0.2

      - name: Clone vcpkg
        run: git clone https://github.com/microsoft/vcpkg.git $VCPKG_ROOT

      - name: Bootstrap vcpkg
        run: |
          cd $VCPKG_ROOT
          ./bootstrap-vcpkg.sh

      - name: Log environment
        run: arch -arch=${{ matrix.conf.arch }} ./scripts/ci/log-env.sh

      - name: Setup and build release
        run: |
          set -x
          cmake --preset release-macos-${{ matrix.conf.arch }}
          cmake --build --preset release-macos-${{ matrix.conf.arch }} 2>&1 | tee build.log

      - name: Dump workspace contents
        run: find $RUNNER_WORKSPACE

      - name: Summarize warnings
        env:
          MAX_WARNINGS: ${{ matrix.conf.max_warnings }}
        run:  python3 ./scripts/ci/count-warnings.py -lf build.log

      - name: Verify executable RPATH
        run: |
          set -x
          otool -l build/release-macos-${{ matrix.conf.arch }}/Release/dosbox \
            | grep "path @executable_path/lib"

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: dosbox-${{ matrix.conf.arch }}
          path: build/release-macos-${{ matrix.conf.arch }}/Release/dosbox
          overwrite: true

      - name: Upload resources
        uses: actions/upload-artifact@v4
        with:
          name: Resources
          path: build/release-macos-${{ matrix.conf.arch }}/Resources
          overwrite: true

  publish_universal_build:
    name:    Publish universal build
    needs:   build_macos_release
    runs-on: macos-15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Inject version string
        run: |
          set -x
          VERSION=$(./scripts/ci/get-version.sh version-and-hash)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Install brew depedencies
        run: HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1 brew install --overwrite librsvg

      - name: Download binaries
        uses: actions/download-artifact@v4

      - name: Package
        run: |
          mv Resources ../
          ./scripts/create-package.sh \
            -p macos \
            -v "${{ env.VERSION }}" \
            -f \
            "$(pwd)" \
            "$(pwd)"


      - name: Inject external vcpkg dependencies
        run: |
          set -x
          EXT_DEPS_VERSION=v0.83.0-1
          ZIP_NAME=dosbox-vcpkg-deps-macos-universal.zip

          wget -nv https://github.com/dosbox-staging/dosbox-staging-ext/releases/download/$EXT_DEPS_VERSION/$ZIP_NAME
          unzip $ZIP_NAME -d vcpkg-deps

          LIB_DIR="dist/DOSBox Staging.app/Contents/MacOS/lib"
          mkdir "$LIB_DIR"
          cp vcpkg-deps/release/* "$LIB_DIR"


      - name: Create dmg
        run: |
          ln -s /Applications dist/

          codesign -s "-" "dist/DOSBox Staging.app" --force --deep -v

          hdiutil create \
              -volname "DOSBox Staging" \
              -srcfolder dist \
              -ov -format UDZO "dosbox-staging-macOS-universal-${{ env.VERSION }}.dmg"


      - name: Upload disk image
        uses: actions/upload-artifact@v4
        # GitHub automatically zips the artifacts, and there's no option
        # to skip it or upload a file only.
        with:
          name: dosbox-staging-macOS-universal-${{ env.VERSION }}
          path: dosbox-staging-macOS-universal-${{ env.VERSION }}.dmg
