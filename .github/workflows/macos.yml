name: macOS builds

on: [push, pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_macos:
    name: ${{ matrix.conf.name }} (${{ matrix.conf.arch }})
    runs-on: ${{ matrix.conf.host }}
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    strategy:
      fail-fast: false
      matrix:
        conf:
          - name: Clang
            host: macos-12
            arch: x86_64
            needs_deps: true
            packages: meson
            build_flags: -Dbuildtype=debug -Dunit_tests=disabled -Ddefault_library=shared
            brew_path: /usr/local/homebrew
            max_warnings: 0

          - name: GCC 11
            host: macos-latest
            arch: x86_64
            needs_deps: true
            packages: gcc@11
            build_flags: -Dbuildtype=debug -Dunit_tests=disabled --native-file=.github/meson/native-gcc-11.ini
            brew_path: /usr/local/homebrew
            max_warnings: 0

          - name: Clang, +tests (macOS 12)
            host: macos-12
            arch: x86_64
            needs_deps: true
            build_flags: -Dbuildtype=debug -Ddefault_library=shared
            brew_path: /usr/local/homebrew
            run_tests: true
            max_warnings: -1

          - name: Clang, +debugger
            host: macos-latest
            arch: x86_64
            needs_deps: true
            build_flags: -Denable_debugger=normal -Ddefault_library=shared
            brew_path: /usr/local/homebrew
            max_warnings: 0

          - name: Clang
            host: [self-hosted, macOS, arm64, debug-builds]
            arch: arm64
            needs_deps: false
            packages: meson
            build_flags: -Dbuildtype=debug -Dunit_tests=disabled -Ddefault_library=shared
            brew_path: /opt/homebrew
            max_warnings: 0

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: false

      # Let self-hosted runners, which don't need_deps, leverage their own ccache.
      - name:  Add the ccache environment to GitHub-hosted runners
        if:    matrix.conf.needs_deps
        shell: bash
        run: |
          set -eu
          echo 'CCACHE_DIR="${{ github.workspace }}/.ccache"' >> $GITHUB_ENV
          echo 'CCACHE_MAXSIZE="64M"' >> $GITHUB_ENV
          echo 'CCACHE_COMPRESS="true"' >> $GITHUB_ENV

      - name:  Prepare brew and compiler caches
        if:    matrix.conf.needs_deps
        id:    prep-caches
        shell: bash
        run: |
          set -eu
          BREW_DIR="$(brew --cache)"
          DISCARD_DIR="${{ github.workspace }}/discard"
          mkdir -p "$DISCARD_DIR"
          mv -f "$BREW_DIR"/* "$DISCARD_DIR"
          mkdir -p "$CCACHE_DIR"
          echo "::set-output name=brew_dir::$BREW_DIR"
          echo "::set-output name=ccache_dir::$CCACHE_DIR"
          echo "::set-output name=today::$(date +%F)"
          echo "::set-output name=name_hash::$(echo '${{ matrix.conf.name }} ${{ matrix.conf.arch }}' | shasum | cut -b-8)"

      - uses:  actions/cache@v2
        if:    matrix.conf.needs_deps
        with:
          path: ${{ steps.prep-caches.outputs.brew_dir }}
          key:  brew-cache-${{ matrix.conf.arch }}-${{ steps.prep-caches.outputs.today }}-1
          restore-keys: brew-cache-${{ matrix.conf.arch }}-

      - name: Install C++ compiler and libraries
        if:   matrix.conf.needs_deps
        run: |
          arch -arch=${{ matrix.conf.arch }} brew install \
            ${{ matrix.conf.packages }} \
            $(cat packages/macos-latest-brew.txt)

      - uses:  actions/cache@v2
        if:    matrix.conf.needs_deps
        with:
          path: ${{ steps.prep-caches.outputs.ccache_dir }}
          key:  ccache-macos-debug-${{ steps.prep-caches.outputs.name_hash }}-${{ steps.prep-caches.outputs.today }}-1
          restore-keys: |
            ccache-macos-debug-${{ steps.prep-caches.outputs.name_hash }}-
            ccache-macos-debug-

      - name:  Cache subprojects
        uses:  actions/cache@v2
        with:
          path: subprojects/packagecache
          key:  subprojects-${{ hashFiles('subprojects/*.wrap') }}

      - name: Setup and build
        run: |
          set -xo pipefail
          export PATH="/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
          eval "$(${{ matrix.conf.brew_path }}/bin/brew shellenv)"
          ./scripts/log-env.sh
          ./scripts/retry_command.sh 3 meson setup ${{ matrix.conf.build_flags }} build
          meson compile -C build 2>&1 | tee build.log

      - name: Run tests
        if:   matrix.conf.run_tests
        run:  meson test -C build --print-errorlogs

      - name: Summarize warnings
        if:   matrix.conf.run_tests != true
        env:
          MAX_WARNINGS: ${{ matrix.conf.max_warnings }}
        run:  python3 ./scripts/count-warnings.py -lf build.log

  build_macos_release:
    name: Release build (${{ matrix.runner.arch }})
    runs-on: ${{ matrix.runner.host }}
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    env:
      MIN_SUPPORTED_MACOSX_DEPLOYMENT_TARGET: ${{ matrix.runner.minimum_deployment }}

    strategy:
      matrix:
        runner:
          # GitHub macOS 11.x CI runner doesn't have working 10.x SDK
          #- host: macos-latest
          #  arch: x86_64
          #  build_flags: --native-file=.github/meson/macos-10.15-deployment-target.ini
          #  minimum_deployment: '10.15'
          #  needs_deps: true
          #  needs_libintl_workaround: true

          - host: [self-hosted, macOS, arm64, release-builds]
            arch: x86_64
            build_flags: --native-file=.github/meson/macos-arm64-to-x86_64-10.15-deployment-target.ini
            brew_path: /usr/local/homebrew
            minimum_deployment: '10.15'
            needs_deps: false
            needs_libintl_workaround: false

          - host: [self-hosted, macOS, arm64, release-builds]
            arch: arm64
            brew_path: /opt/homebrew
            minimum_deployment: '11.0'
            needs_deps: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: false

      # Let self-hosted runners, which don't need_deps, leverage their own ccache.
      - name:  Add the ccache environment to GitHub-hosted runners
        if:    matrix.runner.needs_deps
        shell: bash
        run: |
          set -eu
          echo 'CCACHE_DIR="${{ github.workspace }}/.ccache"' >> $GITHUB_ENV
          echo 'CCACHE_MAXSIZE="64M"' >> $GITHUB_ENV
          echo 'CCACHE_COMPRESS="true"' >> $GITHUB_ENV

      - name:  Prepare brew and compiler caches
        if:    matrix.runner.needs_deps
        id:    prep-caches
        shell: bash
        run: |
          set -eu
          BREW_DIR="$(brew --cache)"
          DISCARD_DIR="${{ github.workspace }}/discard"
          mkdir -p "$DISCARD_DIR"
          mv -f "$BREW_DIR"/* "$DISCARD_DIR"
          mkdir -p "$CCACHE_DIR"
          echo "::set-output name=brew_dir::$BREW_DIR"
          echo "::set-output name=ccache_dir::$CCACHE_DIR"
          echo "::set-output name=today::$(date +%F)"

      - uses:  actions/cache@v2
        if:    matrix.runner.needs_deps
        with:
          path: ${{ steps.prep-caches.outputs.brew_dir }}
          key:  brew-cache-${{ matrix.runner.arch }}-${{ steps.prep-caches.outputs.today }}
          restore-keys: brew-cache-${{ matrix.runner.arch }}-

      - name: Install C++ compiler and libraries
        if:   matrix.runner.needs_deps
        run: >-
          arch -arch=${{ matrix.runner.arch }} brew install librsvg tree
          ccache libpng meson opusfile sdl2 sdl2_net speexdsp

      # Workaround frequent HTTPS-based connectivity issues
      # https://gitlab.freedesktop.org/freedesktop/freedesktop/-/issues/407
      - name:  Fetch the libffi subproject for Glib
        run: ./scripts/fetch-libffi-subproject.sh

      - uses:  actions/cache@v2
        if:    matrix.runner.needs_deps
        with:
          path: ${{ steps.prep-caches.outputs.ccache_dir }}
          key:  ccache-macos-release-${{ matrix.runner.arch }}-${{ steps.prep-caches.outputs.today }}-1
          restore-keys: ccache-macos-release-${{ matrix.runner.arch }}-

      - name:  Cache subprojects
        uses:  actions/cache@v2
        with:
          path: subprojects/packagecache
          key:  subprojects-${{ hashFiles('subprojects/*.wrap') }}

      - name: Log environment
        run:  arch -arch=${{ matrix.runner.arch }} ./scripts/log-env.sh

      - name: Inject version string
        run: |
          set -x
          git fetch --prune --unshallow
          export VERSION=$(git describe --abbrev=5)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Setup and build release
        run: |
          set -x
          eval "$(${{ matrix.runner.brew_path }}/bin/brew shellenv)"
          meson setup ${{ matrix.runner.build_flags }} -Dwrap_mode=forcefallback -Dtry_static_libs=sdl2,sdl2_net build
          meson compile -C build

      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: dosbox-${{ matrix.runner.arch }}
          path: build/dosbox

      - name: Upload resources
        uses: actions/upload-artifact@v2
        with:
          name: Resources
          path: Resources

  publish_universal_build:
    name: Publish universal build
    needs: build_macos_release
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: false

      - name: Inject version string
        run: |
          set -x
          git fetch --prune --unshallow
          export VERSION=$(git describe --abbrev=5)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Install brew depedencies
        run: brew install librsvg

      - name: Download binaries
        uses: actions/download-artifact@v2

      - name: Package
        run: |
          mv Resources ../
          ./scripts/create-package.sh \
            -p macos \
            -v "${{ env.VERSION }}" \
            -f \
            "$(pwd)" \
            "$(pwd)"

      - name: Create dmg
        run: |
          ln -s /Applications dist/

          codesign -s "-" "dist/DOSBox Staging.app" --force --deep -v

          hdiutil create \
              -volname "DOSBox Staging" \
              -srcfolder dist \
              -ov -format UDZO "dosbox-staging-macOS-${{ env.VERSION }}.dmg"

      - name:  Clam AV scan
        id:    prep-clamdb
        shell: bash
        run: |
          brew install clamav
          export CLAMDB_DIR="/usr/local/Cellar/clamav"
          clamscan --heuristic-scan-precedence=yes --recursive --infected dist || true

      - name: Upload disk image
        uses: actions/upload-artifact@v2
        # GitHub automatically zips the artifacts, and there's no option
        # to skip it or upload a file only.
        with:
          name: dosbox-staging-macOS-universal
          path: dosbox-staging-macOS-${{ env.VERSION }}.dmg

  # This job exists only to publish an artifact with version info when building
  # from main branch, so snapshot build version will be visible on:
  # https://dosbox-staging.github.io/downloads/devel/
  #
  publish_additional_artifacts:
    name: Publish additional artifacts
    needs: build_macos_release
    runs-on: macos-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: false

      - name: Generate changelog
        run: |
          set +x
          git fetch --unshallow
          VERSION=$(git describe --abbrev=4)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          NEWEST_TAG=$(git describe --abbrev=0)
          git log "$NEWEST_TAG..HEAD" > changelog-$VERSION.txt
      - uses: actions/upload-artifact@v2
        with:
          # Keep exactly this artifact name; it's being used to propagate
          # version info via GitHub REST API
          name: changelog-${{ env.VERSION }}.txt
          path: changelog-${{ env.VERSION }}.txt
