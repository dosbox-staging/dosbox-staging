name: macOS builds

on: [push, pull_request]

env:
  CCACHE_DIR:      "${{ github.workspace }}/.ccache"
  CCACHE_MAXSIZE:  "64M"
  CCACHE_COMPRESS: "true"
  CLAMDB_DIR:      "/usr/local/Cellar/clamav"

jobs:
  build_macos:
    name: ${{ matrix.conf.name }} (${{ matrix.conf.arch }})
    runs-on: ${{ matrix.conf.host }}
    if: github.event_name != 'pull_request' || contains('dreamer,kcgen,ant-222,Wengier,kklobe', github.actor) == false
    strategy:
      fail-fast: false
      matrix:
        conf:
          - name: Clang
            host: macos-latest
            arch: x86_64
            needs_deps: true
            packages: meson
            max_warnings: 0

          - name: GCC 11
            host: macos-latest
            arch: x86_64
            needs_deps: true
            packages: gcc@11
            build_flags: --native-file=.github/meson/native-gcc-11.ini
            max_warnings: 0

          - name: Clang, +tests
            host: macos-latest
            arch: x86_64
            needs_deps: true
            run_tests: true
            max_warnings: -1

          - name: Clang, +debugger
            host: macos-latest
            arch: x86_64
            needs_deps: true
            build_flags: -Denable_debugger=normal
            max_warnings: 0

          - name: Clang
            host: [self-hosted, macOS, arm64, debug-builds]
            arch: arm64
            needs_deps: false
            packages: meson
            max_warnings: 0

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name:  Prepare brew and compiler caches
        if:    matrix.conf.needs_deps
        id:    prep-caches
        shell: bash
        run: |
          set -eu
          BREW_DIR="$(brew --cache)"
          DISCARD_DIR="${{ github.workspace }}/discard"
          mkdir -p "$DISCARD_DIR"
          mv -f "$BREW_DIR"/* "$DISCARD_DIR"
          mkdir -p "$CCACHE_DIR"
          echo "::set-output name=brew_dir::$BREW_DIR"
          echo "::set-output name=ccache_dir::$CCACHE_DIR"
          echo "::set-output name=today::$(date +%F)"
          echo "::set-output name=name_hash::$(echo '${{ matrix.conf.name }} ${{ matrix.conf.arch }}' | shasum | cut -b-8)"

      - uses:  actions/cache@v2
        if:    matrix.conf.needs_deps
        with:
          path: ${{ steps.prep-caches.outputs.brew_dir }}
          key:  brew-cache-${{ matrix.conf.arch }}-${{ steps.prep-caches.outputs.today }}-1
          restore-keys: brew-cache-${{ matrix.conf.arch }}-

      - name: Install C++ compiler and libraries
        if:   matrix.conf.needs_deps
        run: |
          arch -arch=${{ matrix.conf.arch }} brew install \
            ${{ matrix.conf.packages }} \
            $(cat ./.github/packages/macos-latest-brew.txt)

      - uses:  actions/cache@v2
        if:    matrix.conf.needs_deps
        with:
          path: ${{ steps.prep-caches.outputs.ccache_dir }}
          key:  ccache-macos-debug-${{ steps.prep-caches.outputs.name_hash }}-${{ steps.prep-caches.outputs.today }}-1
          restore-keys: |
            ccache-macos-debug-${{ steps.prep-caches.outputs.name_hash }}-
            ccache-macos-debug-

      - name:  Cache subprojects
        uses:  actions/cache@v2
        with:
          path: subprojects/packagecache
          key:  subprojects-${{ hashFiles('subprojects/*.wrap') }}

      - name: Log environment
        run:  arch -arch=${{ matrix.conf.arch }} ./scripts/log-env.sh

      - run:  arch -arch=${{ matrix.conf.arch }} meson setup ${{ matrix.conf.build_flags }} build

      - name: Build
        run: |
          set -xo pipefail
          arch -arch=${{ matrix.conf.arch }} meson compile -C build 2>&1 | tee build.log

      - name: Run tests
        if:   matrix.conf.run_tests
        run:  arch -arch=${{ matrix.conf.arch }} meson test -C build --print-errorlogs

      - name: Summarize warnings
        if:   matrix.conf.run_tests != true
        env:
          MAX_WARNINGS: ${{ matrix.conf.max_warnings }}
        run:  arch -arch=${{ matrix.conf.arch }} python3 ./scripts/count-warnings.py -lf build.log

  build_macos_release:
    name: Release build (${{ matrix.runner.arch }})
    runs-on: ${{ matrix.runner.host }}
    if: github.event_name != 'pull_request' || contains('dreamer,kcgen,ant-222,Wengier,kklobe', github.actor) == false

    strategy:
      matrix:
        runner:
          - host: macos-latest
            arch: x86_64
            needs_deps: true

          - host: [self-hosted, macOS, arm64, release-builds]
            arch: arm64
            needs_deps: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name:  Prepare brew and compiler caches
        if:    matrix.runner.needs_deps
        id:    prep-caches
        shell: bash
        run: |
          set -eu
          BREW_DIR="$(brew --cache)"
          DISCARD_DIR="${{ github.workspace }}/discard"
          mkdir -p "$DISCARD_DIR"
          mv -f "$BREW_DIR"/* "$DISCARD_DIR"
          mkdir -p "$CCACHE_DIR"
          echo "::set-output name=brew_dir::$BREW_DIR"
          echo "::set-output name=ccache_dir::$CCACHE_DIR"
          echo "::set-output name=today::$(date +%F)"

      - uses:  actions/cache@v2
        if:    matrix.runner.needs_deps
        with:
          path: ${{ steps.prep-caches.outputs.brew_dir }}
          key:  brew-cache-${{ matrix.runner.arch }}-${{ steps.prep-caches.outputs.today }}
          restore-keys: brew-cache-${{ matrix.runner.arch }}-

      - name: Install C++ compiler and libraries
        if:   matrix.runner.needs_deps
        run: |
          arch -arch=${{ matrix.runner.arch }} brew install librsvg tree \
            $(cat ./.github/packages/macos-latest-brew.txt)

      - uses:  actions/cache@v2
        if:    matrix.runner.needs_deps
        with:
          path: ${{ steps.prep-caches.outputs.ccache_dir }}
          key:  ccache-macos-release-${{ matrix.runner.arch }}-${{ steps.prep-caches.outputs.today }}-1
          restore-keys: ccache-macos-release-${{ matrix.runner.arch }}-

      - name:  Cache subprojects
        uses:  actions/cache@v2
        with:
          path: subprojects/packagecache
          key:  subprojects-${{ hashFiles('subprojects/*.wrap') }}

      - name: Log environment
        run:  arch -arch=${{ matrix.runner.arch }} ./scripts/log-env.sh

      - name: Inject version string
        run: |
          set -x
          git fetch --prune --unshallow
          export VERSION=$(git describe --abbrev=5)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Setup release build
        run: |
          arch -arch=${{ matrix.runner.arch }} meson setup \
            --wrap-mode=forcefallback \
            -Ddebug=false \
            -Db_ndebug=true \
            -Ddefault_library=static \
            -Db_asneeded=true \
            -Doptimization=s \
            -Db_lto=true \
            -Dtry_static_libs=opusfile,png,sdl2,sdl2_net \
            -Dfluidsynth:enable-floats=true \
            -Dfluidsynth:try-static-deps=true \
            build

      - name: Build
        run:  arch -arch=${{ matrix.runner.arch }} ninja -C build

      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: dosbox-${{ matrix.runner.arch }}
          path: build/dosbox
        
  publish_universal_build:
    name: Publish universal build
    needs: build_macos_release
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Inject version string
        run: |
          set -x
          git fetch --prune --unshallow
          export VERSION=$(git describe --abbrev=5)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Install brew depedencies
        run: brew install librsvg          

      - name: Download binaries
        uses: actions/download-artifact@v2
          
      - name: Package
        run: |
          set -x

          # Print shared object dependencies
          otool -L dosbox-arm64/dosbox
          python3 scripts/verify-macos-dylibs.py dosbox-arm64/dosbox
          
          # Create universal binary from both architectures
          mkdir dosbox-universal
          lipo dosbox-x86_64/dosbox dosbox-arm64/dosbox -create -output dosbox-universal/dosbox

          # Generate icon
          make -C contrib/icons/ dosbox-staging.icns

          dst=dist/dosbox-staging.app/Contents

          # Prepare content
          install -d "$dst/MacOS/"
          install -d "$dst/Resources/"
          install -d "$dst/SharedSupport/"
                    
          install        "dosbox-universal/dosbox"           "$dst/MacOS/"
          install -m 644 "contrib/macos/Info.plist.template" "$dst/Info.plist"
          install -m 644 "contrib/macos/PkgInfo"             "$dst/PkgInfo"
          install -m 644 "contrib/icons/dosbox-staging.icns" "$dst/Resources/"
          install -m 644 "docs/README.template"              "$dst/SharedSupport/README"
          install -m 644 "COPYING"                           "$dst/SharedSupport/COPYING"
          install -m 644 "README"                            "$dst/SharedSupport/manual.txt"
          install -m 644 "docs/README.video"                 "$dst/SharedSupport/video.txt"

          # Fill README template file
          sed -i -e "s|%VERSION%|${{ env.VERSION }}|"           "$dst/Info.plist"
          sed -i -e "s|%GIT_COMMIT%|$GITHUB_SHA|"               "$dst/SharedSupport/README"
          sed -i -e "s|%GIT_BRANCH%|${GITHUB_REF#refs/heads/}|" "$dst/SharedSupport/README"
          sed -i -e "s|%GITHUB_REPO%|$GITHUB_REPOSITORY|"       "$dst/SharedSupport/README"

          # Prepare translation files
          #
          # Note:
          #   We conciously drop the dialect postfix because no dialects are available.
          #   (US was the default DOS dialect and therefore is the default for 'en').
          #   There users get the generic translation and benefit from simpler filenames.
          #   Dialect translations will be added if/when they're available.
          #
          dst_lng="$dst/Resources/translations/"
          install -d "$dst_lng"
          install -m 644 contrib/translations/de/de_DE.lng       "$dst_lng/de.lng"
          install -m 644 contrib/translations/en/en_US.lng       "$dst_lng/en.lng"
          install -m 644 contrib/translations/es/es_ES.lng       "$dst_lng/es.lng"
          install -m 644 contrib/translations/fr/fr_FR.lng       "$dst_lng/fr.lng"
          install -m 644 contrib/translations/it/it_IT.lng       "$dst_lng/it.lng"
          install -m 644 contrib/translations/pl/pl_PL.CP437.lng "$dst_lng/pl.cp437.lng"
          install -m 644 contrib/translations/pl/pl_PL.lng       "$dst_lng/pl.lng"
          install -m 644 contrib/translations/ru/ru_RU.lng       "$dst_lng/ru.lng"
          ln -s /Applications dist/

          codesign -s "-" dist/dosbox-staging.app --force --deep -v
          
          hdiutil create \
              -volname "dosbox-staging" \
              -srcfolder dist \
              -ov -format UDZO "dosbox-staging-macOS-${{ env.VERSION }}.dmg"

      - name:  Clam AV scan
        id:    prep-clamdb
        shell: bash
        run: |
          brew install clamav
          clamscan --heuristic-scan-precedence=yes --recursive --infected dist || true

      - name: Upload disk image
        uses: actions/upload-artifact@v2
        # GitHub automatically zips the artifacts, and there's no option
        # to skip it or upload a file only.
        with:
          name: dosbox-staging-macOS-universal
          path: dosbox-staging-macOS-${{ env.VERSION }}.dmg
    
  # This job exists only to publish an artifact with version info when building
  # from main branch, so snapshot build version will be visible on:
  # https://dosbox-staging.github.io/downloads/devel/
  #
  publish_additional_artifacts:
    name: Publish additional artifacts
    needs: build_macos_release
    runs-on: macos-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2
      - name: Generate changelog
        run: |
          set +x
          git fetch --unshallow
          VERSION=$(git describe --abbrev=4)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          NEWEST_TAG=$(git describe --abbrev=0)
          git log "$NEWEST_TAG..HEAD" > changelog-$VERSION.txt
      - uses: actions/upload-artifact@v2
        with:
          # Keep exactly this artifact name; it's being used to propagate
          # version info via GitHub REST API
          name: changelog-${{ env.VERSION }}.txt
          path: changelog-${{ env.VERSION }}.txt
