name: PVS-Studio Scan

on:
  push:
  pull_request:
    paths-ignore:
      - '.github/**'

jobs:
  run_check:
    name: Run-check
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || contains('dreamer,kcgen,ant-222', github.actor) == false
    steps:
      - run: echo

  # Note: secrets are vulerable to exfiltration attack if you allow untrusted
  #       users to both *modify* and *run* this CI workflow within the repository
  #       that defines those secrets.
  build_pvs_studio_analyzer:
    name: PVS-Studio static analyzer
    runs-on: ubuntu-latest
    needs: run_check
    env:
      debfile: pvs-studio-7.06.37052.34-amd64.deb
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - run:  sudo apt-get update
      - name: Log and setup environment
        run: |
          ./scripts/log-env.sh
          mkdir -p pvs-package "$HOME/.config/PVS-Studio"
      - uses: actions/cache@v1
        id: cache-pvs-package
        with:
          path: pvs-package
          key: ${{ env.debfile }}
      - name:  Fetch PVS-Studio package
        if:    steps.cache-pvs-package.outputs.cache-hit != 'true'
        run:   wget "https://files.viva64.com/${debfile}" -O "pvs-package/pvs.deb"
      - name: Install packages
        run: |
          set -xeu
          sudo apt-get install strace $(./scripts/list-build-dependencies.sh -m apt -c gcc)
          sudo dpkg -i "pvs-package/pvs.deb"

      - name: Check for source-only changes
        if: secrets.PvsStudioKey == ''
        id: source-changes
        run: >
          [[ "$(git diff --name-status master | grep -v '.*\.cpp\|.*\.c' | wc -l)" == "0" ]]
          && echo "::set-output name=trusted::true"
          || echo "::set-output name=trusted::false"

      - name: Cache PVS-Studio registration
        uses: actions/cache@v1
        id: cache-pvs-config
        if: steps.source-changes.outputs.trusted == true || contains('dreamer,kcgen,ant-222', github.actor) == true
        with:
          path: ${{ github.home }}/.config/PVS-Studio
          key: pvs-config-2020
      - name: Register PVS-Studio
        if:   steps.cache-pvs-config.outputs.cache-hit != 'true' && secrets.PvsStudioKey != ''
        run:  pvs-studio-analyzer credentials "${{ secrets.PvsStudioName }}" "${{ secrets.PvsStudioKey }}"

      - name: Build
        run: |
          set -xeu
          ./autogen.sh
          export FLAGS="-Og"
          ./configure CFLAGS="${FLAGS}" CXXFLAGS="${FLAGS}"
          pvs-studio-analyzer trace -- make
      - name: Analyze
        run: |
          set -xeu
          log="pvs-analysis.log"
          mirsa_criteria="MISRA:1,2"
          general_criteria="GA:1,2;64:1;OP:1,2,3;CS:1"
          stamp="$(date +'%Y-%m-%d_T%H%M')-${GITHUB_SHA:0:8}"
          reportdir="pvs-report/pvs-report-${stamp}"
          mkdir -p "${reportdir}"
          pvs-studio-analyzer analyze -a 63 -s .pvs-suppress -o "${log}" -j "$(nproc)"
          plog-converter -a "${general_criteria}" -d V1042 -t fullhtml -p dosbox-staging \
          -v "${GITHUB_SHA:0:8}" -o "${reportdir}" "${log}"
          mv "${reportdir}/fullhtml" "${reportdir}/general"
          plog-converter -a "${mirsa_criteria}" -d V1042 -t fullhtml -p dosbox-staging \
          -v "${GITHUB_SHA:0:8}" -o "${reportdir}" "${log}"
          mv "${reportdir}/fullhtml" "${reportdir}/mirsa"
          plog-converter -a "${general_criteria}" -d V1042 -t csv -o pvs-report.csv "${log}"
          cp -l pvs-report.csv "${reportdir}/general/"
          pvs-studio-analyzer suppress -a "${general_criteria}" \
          -o "${reportdir}/general/supressible-list.json" "${log}"
      - name: Upload report
        uses: actions/upload-artifact@master
        with:
          name: pvs-analysis-report
          path: pvs-report
      - name: Summarize report
        env:
          MAX_BUGS: 510
        run: |
          echo "Full report is included in build Artifacts"
          echo
          ./scripts/count-pvs-bugs.py pvs-report.csv "${MAX_BUGS}"

