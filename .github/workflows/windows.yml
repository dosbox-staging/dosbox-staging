name: Windows builds

on: [push, pull_request]

jobs:
  build_windows_vs:
    name: ${{ matrix.conf.name }}
    runs-on: windows-latest
    if: github.event_name != 'pull_request' || contains('dreamer,kcgen,ant-222,Wengier', github.actor) == false
    strategy:
      matrix:
        conf:
          - name: MSVC 32-bit
            arch: x86
            max_warnings: 267
          - name: MSVC 64-bit
            arch: x64
            max_warnings: 1969
    steps:
      - name:  Backup existing vcpkg installation
        shell: pwsh
        run: |
          mv c:\vcpkg c:\vcpkg-bak
          md c:\vcpkg -ea 0

      - name: Generate vcpkg cache key
        id:    prep-vcpkg
        shell: bash
        run: |
          echo "::set-output name=year_and_week::$(date '+%Y%W')"

      - name: Cache vcpkg
        uses: actions/cache@v2
        id:   cache-vcpkg
        with:
          path: c:\vcpkg
          key: vcpkg-${{ matrix.conf.arch }}-${{ steps.prep-vcpkg.outputs.year_and_week }}-1

      - name:  Install new packages using vcpkg
        if:    steps.cache-vcpkg.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          rm -R c:\vcpkg
          mv c:\vcpkg-bak c:\vcpkg
          vcpkg install --triplet ${{ matrix.conf.arch }}-windows libpng sdl2 sdl2-net opusfile fluidsynth
          if (-not $?) { throw "vcpkg failed to install library dependencies" }

      - name:  Integrate packages
        shell: pwsh
        run: |
          vcpkg integrate install
          if (-not $?) { throw "vcpkg failed to integrate packages" }

      - uses:  actions/checkout@v2
      - name:  Log environment
        shell: pwsh
        run:   .\scripts\log-env.ps1

      - name:  Build
        shell: pwsh
        env:
          PATH: '${env:PATH};C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\amd64'
        run: |
          cd vs
          MSBuild -m dosbox.sln -p:Configuration=Debug -p:Platform=${{ matrix.conf.arch }} | Tee-Object build.log
      - name:  Summarize warnings
        shell: pwsh
        env:
          MAX_WARNINGS: ${{ matrix.conf.max_warnings }}
        run: python scripts\count-warnings.py -f --msvc vs\build.log


  build_windows_vs_release:
    name: ${{ matrix.conf.name }}
    needs: build_windows_vs
    runs-on: windows-latest
    strategy:
      matrix:
        conf:
          - name: Release build (32-bit)
            arch: x86
            vs-release-dirname: Win32
          - name: Release build (64-bit)
            arch: x64
            vs-release-dirname: x64
    steps:
      - name:  Prepare vcpkg for cache restore
        id:    prep-vcpkg
        shell: pwsh
        run: |
          mv c:\vcpkg c:\vcpkg-bak
          md c:\vcpkg -ea 0

      - name: Restore the most recent cache of vcpkg
        uses: actions/cache@v2
        with:
          path: c:\vcpkg
          key: vcpkg-${{ matrix.conf.arch }}-

      - name:  Integrate packages
        shell: pwsh
        run: |
          vcpkg integrate install
          if (-not $?) { throw "vcpkg failed to integrate packages" }

      - uses:  actions/checkout@v2
      - name:  Log environment
        shell: pwsh
        run:   .\scripts\log-env.ps1

      - name:  Inject version string
        shell: bash
        run: |
          set -x
          git fetch --prune --unshallow
          export VERSION=$(git describe --abbrev=4)
          sed -i "s|DOSBOX_DETAILED_VERSION \"git\"|DOSBOX_DETAILED_VERSION \"$VERSION\"|" src/platform/visualc/config.h
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name:  Build
        shell: pwsh
        env:
          PATH: '${env:PATH};C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\amd64'
        run: |
          cd vs
          MSBuild -m dosbox.sln -p:Configuration=Release -p:Platform=${{ matrix.conf.arch }}

      - name:  Package
        shell: bash
        env:
          VC_REDIST_PATH: 'C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Redist/MSVC'
        run: |
          set -x

          # Prepare content
          readonly RELEASE_DIR=${{ matrix.conf.vs-release-dirname }}/Release
          ls "vs/$RELEASE_DIR"
          mkdir -p dest/doc
          cp vs/$RELEASE_DIR/dosbox.exe           dest/
          cp COPYING                              dest/COPYING.txt
          cp docs/README.template                 dest/README.txt
          cp docs/README.video                    dest/doc/video.txt
          cp docs/vc_redist.txt                   dest/doc/vc_redist.txt
          cp README                               dest/doc/manual.txt
          cp vs/$RELEASE_DIR/libfluidsynth-2.dll  dest/
          cp vs/$RELEASE_DIR/glib-2.dll           dest/ # fluidsynth dependency
          cp vs/$RELEASE_DIR/intl-8.dll           dest/ # glib dependency
          cp vs/$RELEASE_DIR/pcre.dll             dest/ # glib dependency
          cp vs/$RELEASE_DIR/iconv-2.dll          dest/ # glib dependency
          cp vs/$RELEASE_DIR/ogg.dll              dest/
          cp vs/$RELEASE_DIR/opus.dll             dest/
          cp vs/$RELEASE_DIR/SDL2.dll             dest/
          cp vs/$RELEASE_DIR/SDL2_net.dll         dest/
          cp vs/$RELEASE_DIR/libpng16.dll         dest/
          cp src/libs/zmbv/$RELEASE_DIR/zlib1.dll dest/ # libpng dependency
          cp src/libs/zmbv/$RELEASE_DIR/zmbv.dll  dest/

          # List version of available Visual C++ Redistributable files
          ls -l "$VC_REDIST_PATH"

          # Include the necessary dlls from one of available versions
          readonly VC_REDIST_VERSION="14.28.29325"
          readonly VC_REDIST_DIR="$VC_REDIST_PATH/$VC_REDIST_VERSION/${{ matrix.conf.arch }}/Microsoft.VC142.CRT"
          cp "$VC_REDIST_DIR/msvcp140.dll"       dest/
          cp "$VC_REDIST_DIR/vcruntime140.dll"   dest/
          cp "$VC_REDIST_DIR/vcruntime140_1.dll" dest/ || true # might be missing, depending on arch

          # Fill README template file
          sed -i "s|%GIT_COMMIT%|$GITHUB_SHA|"               dest/README.txt
          sed -i "s|%GIT_BRANCH%|${GITHUB_REF#refs/heads/}|" dest/README.txt
          sed -i "s|%GITHUB_REPO%|$GITHUB_REPOSITORY|"       dest/README.txt

          # Create dir for zipping
          mv dest dosbox-staging-windows-${{ matrix.conf.arch }}-${{ env.VERSION }}

      - name: Windows Defender AV Scan
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          $dosboxDir = "${{ github.workspace }}\dosbox-staging-windows-${{ matrix.conf.arch }}-${{ env.VERSION }}"
          & 'C:\Program Files\Windows Defender\MpCmdRun.exe' -Scan -ScanType 3 -DisableRemediation -File $dosboxDir
          if( $LASTEXITCODE -ne 0 ) {
              Get-Content -Path $env:TEMP\MpCmdRun.log
              Throw "Exit $LASTEXITCODE : Windows Defender found an issue"
          }

      - name: Upload package
        uses: actions/upload-artifact@v2
        with:
          name: dosbox-staging-windows-${{ matrix.conf.arch }}-${{ env.VERSION }}
          path: dosbox-staging-windows-${{ matrix.conf.arch }}-${{ env.VERSION }}


  publish_additional_artifacts:
    name: Publish additional artifacts
    needs: build_windows_vs_release
    runs-on: windows-latest
    if: github.event_name != 'pull_request' || contains('dreamer,kcgen,ant-222,Wengier', github.actor) == false
    steps:
      - uses: actions/checkout@v2
      - name: Generate changelog
        shell: bash
        run: |
          set +x
          git fetch --unshallow
          VERSION=$(git describe --abbrev=4)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          NEWEST_TAG=$(git describe --abbrev=0)
          git log "$NEWEST_TAG..HEAD" > changelog-$VERSION.txt
      - uses: actions/upload-artifact@v2
        with:
          # Keep exactly this artifact name; it's being used to propagate
          # version info via GitHub REST API
          name: changelog-${{ env.VERSION }}.txt
          path: changelog-${{ env.VERSION }}.txt
