name: Windows builds
on: push

jobs:

  build_windows_msys2:
    name: ${{ matrix.conf.compiler }} ${{ matrix.conf.bits }}-bit
    runs-on: windows-latest
    strategy:
      # Because Clang depends on GCC, we run the Clang-32/64bit jobs
      # first to create combined caches that include both Clang and GCC.
      # Running 2-jobs at once ensure the GCC jobs start after Clang.
      max-parallel: 2
      matrix:
        conf:
          - compiler: Clang
            bits: 32
            arch: i686
            max_warnings: 73
          - compiler: Clang
            bits: 64
            arch: x86_64
            max_warnings: 110
          - compiler: GCC
            bits: 32
            arch: i686
            max_warnings: 153
          - compiler: GCC
            bits: 64
            arch: x86_64
            max_warnings: 193
    env:
      CHERE_INVOKING: yes
    steps:
      - uses:  actions/checkout@v1
        with:
          fetch-depth: 1
      - name:  Get Date
        id:    get-date
        shell: bash
        run:   echo ::set-output name=date::$(date +%Y-%W)
      - uses:  actions/cache@v1
        id:    cache-msys2
        with:
          path: 'C:/tools/msys64'
          key: msys2-${{ matrix.conf.bits }}-${{ steps.get-date.outputs.date }}-2
      - name:  Install MSYS2
        if:    steps.cache-msys2.outputs.cache-hit != 'true'
        run:   choco install msys2 --no-progress
      - name:  Install C++ compiler and libraries
        if:    steps.cache-msys2.outputs.cache-hit != 'true'
        shell: python scripts\msys-bash.py {0}
        run:   ./scripts/list-build-dependencies.sh -m msys2 -c clang -b ${{ matrix.conf.bits }} | xargs pacman -S --noconfirm
      - name:  Shrink MSYS2 for cache
        if:    steps.cache-msys2.outputs.cache-hit != 'true'
        shell: python scripts\msys-bash.py {0}
        run:   ./.github/scripts/shrink-msys2.sh
      - name:  Log environment
        shell: python scripts\msys-bash.py {0}
        run:   ./scripts/log-env.sh
      - name:  Build
        shell: python scripts\msys-bash.py {0}
        run: |
          # The following two MSYSTEM variables are used by auto-tools to determine host
          # architecture so we override them to match the current build type (32-bit or 64-bit)
          export MSYSTEM_CARCH=${{ matrix.conf.arch }}
          export MSYSTEM_CHOST=${{ matrix.conf.arch }}-pc-msys
          ./scripts/build.sh --compiler ${{ matrix.conf.compiler }} --build-type Debug --bin-path /mingw${{ matrix.conf.bits }}/bin
      - name:  Summarize warnings
        env:
          MAX_WARNINGS: ${{ matrix.conf.max_warnings }}
        run:   python scripts\count-warnings.py build.log

  build_windows_vs:
    name: MSVC 32-bit
    runs-on: windows-latest
    strategy:
      matrix:
        type: [Debug]
    steps:
      - uses:  actions/checkout@v1
        with:
          fetch-depth: 1
      - name:  Install packages
        shell: pwsh
        run: |
          vcpkg install libpng sdl2 sdl2-net opusfile
          vcpkg integrate install
      - name:  Log environment
        shell: pwsh
        run:   .\scripts\log-env.ps1
      - name:  Build
        shell: pwsh
        env:
          PATH: '${env:PATH};C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\amd64'
        run: |
          cd vs
          MSBuild -m dosbox.sln -p:Configuration=${{ matrix.type }}

  build_windows_vs_release:
    name: Release build
    runs-on: windows-latest
    steps:
      - uses:  actions/checkout@v1
      - name:  Install packages
        shell: pwsh
        run: |
          vcpkg install libpng sdl2 sdl2-net opusfile
          vcpkg integrate install
      - name:  Log environment
        shell: pwsh
        run:   .\scripts\log-env.ps1
      - name:  Inject version string
        shell: bash
        run: |
          set -x
          export VERSION=$(git describe --abbrev=4)
          sed -i "s|VERSION \"git\"|VERSION \"$VERSION\"|" src/platform/visualc/config.h
          echo ::set-env name=VERSION::$VERSION
      - name:  Build
        shell: pwsh
        env:
          PATH: '${env:PATH};C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\amd64'
        run: |
          cd vs
          MSBuild -m dosbox.sln -p:Configuration=Release
          # TODO "Windows SmartScreen" complains about unsigned .exe during
          #      the first start of a build. Maybe self-signed certificate
          #      will make it a bit more user-friendly.
      - name:  Package
        shell: bash
        run: |
          set -x
          # Prepare content
          mkdir -p dest/doc
          cp vs/Release/dosbox.exe           dest/
          cp COPYING                         dest/COPYING.txt
          cp docs/README.template            dest/README.txt
          cp docs/README.video               dest/doc/video.txt
          cp README                          dest/doc/manual.txt
          cp vs/Release/libpng16.dll         dest/
          cp vs/Release/ogg.dll              dest/
          cp vs/Release/opus.dll             dest/
          cp vs/Release/SDL2.dll             dest/
          cp vs/Release/SDL2_net.dll         dest/
          cp src/libs/zmbv/Release/zlib1.dll dest/
          cp src/libs/zmbv/Release/zmbv.dll  dest/
          # Fill README template file
          sed -i "s|%GIT_COMMIT%|$GITHUB_SHA|"               dest/README.txt
          sed -i "s|%GIT_BRANCH%|${GITHUB_REF#refs/heads/}|" dest/README.txt
          sed -i "s|%GITHUB_REPO%|$GITHUB_REPOSITORY|"       dest/README.txt
          # Create dir for zipping
          mkdir dosbox-staging-windows-x86
          mv dest dosbox-staging-windows-x86/dosbox-staging-${{ env.VERSION }}
      - name: Upload package
        uses: actions/upload-artifact@master
        with:
          name: dosbox-staging-windows-x86
          path: dosbox-staging-windows-x86
