name: Windows builds
permissions: read-all

on:
  push:
    paths-ignore:
      - '.clang-format'
      - '.mdl-styles'
      - '*.md'
      - 'docs/**'
      - 'licenses/**'
      - 'website/**'

  pull_request:
    paths-ignore:
      - '.clang-format'
      - '.mdl-styles'
      - '*.md'
      - 'docs/**'
      - 'licenses/**'
      - 'website/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_windows_release:
    name: Release ${{ matrix.conf.debugger && 'w/ debugger' || '' }} (${{ matrix.conf.arch }})
    if:   github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository

    runs-on: windows-2022
    strategy:
      matrix:
        conf:
          # TODO reinstate ARM64 build at some point, but we'll need to build the
          # external vcpkg dependencies for AMR64 first
          - arch: x64
            debugger: false
            max_warnings: 0

          - arch: x64
            debugger: true
            max_warnings: 0

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Set common vars
        uses: ./.github/actions/set-common-vars

      - name:  Set variables
        id:    set_vars
        shell: bash
        run: |
          set -x
          echo "BUILD_DIR=build/release-windows/Release" >> $GITHUB_ENV
          echo "PACKAGE_DIR=dosbox-staging-windows-${{ matrix.conf.arch }}-$DOSBOX_VERSION_AND_HASH" >> $GITHUB_ENV

      - name: Set up vcpkg
        uses: ./.github/actions/setup-vcpkg
        with:
          name_os: "windows"
          arch: "${{ matrix.conf.arch }}"

      - name: Set up CMake
        uses: lukka/get-cmake@v4.0.3

      - name:  Log environment
        shell: pwsh
        run:   .\scripts\ci\log-env.ps1

      - name:  Build release
        if:    ${{ !matrix.conf.debugger }}
        shell: pwsh
        run: |
          cmake --preset release-windows
          cmake --build --preset release-windows 2>&1 | Tee-Object -FilePath build.log

      - name:  Run tests
        if:    ${{ !matrix.conf.debugger }}
        shell: pwsh
        run: |
          ctest --preset release-windows 2>&1 | Tee-Object -FilePath tests.log

      - name:  Build release with debugger
        if:    ${{ matrix.conf.debugger }}
        shell: pwsh
        run: |
          cmake --preset release-windows -DOPT_DEBUG=ON -DOPT_HEAVY_DEBUG=ON
          cmake --build --preset release-windows 2>&1 | Tee-Object -FilePath build.log

      - name: Summarize warnings
        env:
          MAX_WARNINGS: ${{ matrix.conf.max_warnings }}
        run:  python3 ./scripts/ci/count-warnings.py -lf --msclang build.log

      - name:  Package standard build
        if:    ${{ !matrix.conf.debugger }}
        shell: bash
        run: |
          set -x
          # Construct VC_REDIST_DIR
          readonly VC_REDIST_BASE="C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Redist/MSVC"
          readonly VC_REDIST_CRT_VERSION="Microsoft.VC143.CRT"

          for ENTRY in "$VC_REDIST_BASE"/*
          do
              ENTRY=$ENTRY/${{ matrix.conf.arch }}/$VC_REDIST_CRT_VERSION
              if [ -d "$ENTRY" ]; then
                  export VC_REDIST_DIR=$ENTRY
                  break
              fi
          done
          if [ ! -d "$VC_REDIST_DIR" ]; then
              echo "Failed to find MSVC Redistributable"
              exit 1
          fi

          # Package
          ./scripts/packaging/create-package.sh -p windows "$BUILD_DIR" "$PACKAGE_DIR"


      - name:  Inject external vcpkg dependencies
        if:    ${{ !matrix.conf.debugger }}
        shell: bash
        run: |
          set -x
          ZIP_NAME=dosbox-vcpkg-deps-windows-${{ matrix.conf.arch }}.zip

          curl -L https://github.com/dosbox-staging/dosbox-staging-ext/releases/download/$VCPKG_EXT_DEPS_VERSION/$ZIP_NAME -o $ZIP_NAME
          unzip $ZIP_NAME -d vcpkg-deps

          cp vcpkg-deps/release/* "$PACKAGE_DIR"


      - name:  Inject Nuked-SC55-CLAP plugin
        if:    ${{ !matrix.conf.debugger }}
        shell: bash
        run: |
          set -x
          ZIP_NAME=Nuked-SC55-CLAP-windows-${{ matrix.conf.arch }}-$NUKED_SC55_CLAP_VERSION.zip

          curl -L https://github.com/johnnovak/Nuked-SC55-CLAP/releases/download/$NUKED_SC55_CLAP_VERSION/$ZIP_NAME -o $ZIP_NAME
          unzip $ZIP_NAME -d nuked-sc55-clap

          PLUGINS_DIR="$PACKAGE_DIR/plugins"
          mkdir $PLUGINS_DIR
          cp nuked-sc55-clap/* $PLUGINS_DIR


      - name: Upload package
        if:   ${{ !matrix.conf.debugger }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_DIR }}-without-debugger
          path: ${{ env.PACKAGE_DIR }}
          overwrite: true

      - name:  Package debugger build
        if:    ${{ matrix.conf.debugger }}
        shell: bash
        run: |
          set -x
          mkdir -p "$PACKAGE_DIR"
          # Move the debugger build into the release area
          ls "$BUILD_DIR"
          cp "$BUILD_DIR/dosbox.exe" "$PACKAGE_DIR/dosbox_with_debugger.exe"

      - name: Upload debugger artifact
        if:   ${{ matrix.conf.debugger }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_DIR }}-with-debugger
          path: ${{ env.PACKAGE_DIR }}/dosbox_with_debugger.exe
          overwrite: true


  merge_artifacts:
    name: Merge release & debugger artifacts (${{ matrix.arch }} )
    needs: build_windows_release

    runs-on: ubuntu-latest
    strategy:
      matrix:
        # TODO reinstate ARM64 build at some point, but we'll need to build the
        # external vcpkg dependencies for AMR64 first
        # arch: [x64, ARM64]
        arch: [x64]

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Set common vars
        uses: ./.github/actions/set-common-vars

      - name: Merge artifacts (${{ matrix.arch }} )
        uses: actions/upload-artifact/merge@v4
        with:
          name:    dosbox-staging-windows-${{ matrix.arch }}-${{ env.DOSBOX_VERSION_AND_HASH }}
          pattern: dosbox-staging-windows-${{ matrix.arch }}-*
          delete-merged: 'true'


  build_installer:
    name:    Build installer (${{ matrix.arch }} )
    needs:   merge_artifacts
    runs-on: windows-2022
    strategy:
      matrix:
        # We only provide x64 installers as ARM64 support is experimental
        arch: [x64]

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Set common vars
        uses: ./.github/actions/set-common-vars

      - name:  Set variables
        id:    set_vars
        shell: bash
        run: |
          set -x
          echo "PACKAGE_DIR=dosbox-staging-windows-${{ matrix.arch }}-$DOSBOX_VERSION_AND_HASH" >> $GITHUB_ENV

      - name: Dump workspace contents
        shell: bash
        run: find $RUNNER_WORKSPACE

      - name: Prepare Windows installer
        shell: bash
        run: |
          set -x
          PACKAGE_INFO="release $DOSBOX_VERSION_AND_HASH"

          mkdir -p out/program

          sed -e "s|%PACKAGE_INFORMATION%|${PACKAGE_INFO}|;s|%GITHUB_REPO%|${{ github.repository }}|" \
              docs/README.template >out/setup_preamble.txt

          sed -i "s|DOSBOX-STAGING-VERSION|${DOSBOX_VERSION_AND_HASH}|" \
              extras/windows-installer/DOSBox-Staging-setup.iss

          cp extras/windows-installer/*                   out
          cp extras/icons/windows/dosbox-staging.ico      out
          cp extras/icons/windows/dosbox-staging.bmp      out
          cp extras/icons/windows/dosbox-staging-side.bmp out

          mv $PACKAGE_DIR/*          out/program
          mv out/program/dosbox*.exe out


      - name: Build Windows installer
        shell: pwsh
        run: |
          cd out
          C:\PROGRA~2\INNOSE~1\ISCC.exe DOSBox-Staging-setup.iss
          dir

      - name: Upload Windows installer
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_DIR }}-setup
          path: ${{ github.workspace }}\out\${{ env.PACKAGE_DIR }}-setup.exe
          overwrite: true
