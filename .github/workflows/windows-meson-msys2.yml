name: MSYS2 builds

on: [push, pull_request]

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CCACHE_DIR:      "/tmp/.ccache"
  CCACHE_MAXSIZE:  "64M"
  CCACHE_COMPRESS: "true"

jobs:
  build_msys2:
    name: ${{ matrix.conf.name }}
    runs-on: windows-latest
    if: github.event_name != 'pull_request' || contains('dreamer,kcgen,ant-222,Wengier,shermp', github.actor) == false

    strategy:
      matrix:
        conf:
          - name: GCC (MinGW) x86
            toolchain: ""
            arch: i686
            sys: MINGW32
            max_warnings: 19
          - name: GCC (MinGW) x86_64
            toolchain: ""
            arch: x86_64
            sys: MINGW64
            max_warnings: 19
          - name: Clang x86
            toolchain: clang-
            arch: i686
            sys: CLANG32
            max_warnings: 19
          - name: Clang x86_64
            toolchain: clang-
            arch: x86_64
            sys: CLANG64
            max_warnings: 19
          - name: GCC +tests
            toolchain: ""
            arch: x86_64
            sys: MINGW64
            run_tests: true
            max_warnings: -1
          - name: GCC +debugger
            toolchain: ""
            arch: x86_64
            sys: MINGW64
            max_warnings: 21
            build_flags: -Denable_debugger=normal
    
    defaults:
      run:
        shell: msys2 {0}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.conf.sys}}
          update: true
          install: >-
            git
            mingw-w64-${{matrix.conf.toolchain}}${{matrix.conf.arch}}-meson
            mingw-w64-${{matrix.conf.toolchain}}${{matrix.conf.arch}}-gcc
            mingw-w64-${{matrix.conf.toolchain}}${{matrix.conf.arch}}-ccache
            mingw-w64-${{matrix.conf.toolchain}}${{matrix.conf.arch}}-pkgconf
            mingw-w64-${{matrix.conf.toolchain}}${{matrix.conf.arch}}-python
            mingw-w64-${{matrix.conf.toolchain}}${{matrix.conf.arch}}-ntldd
            mingw-w64-${{matrix.conf.toolchain}}${{matrix.conf.arch}}-ncurses
            mingw-w64-${{matrix.conf.toolchain}}${{matrix.conf.arch}}-glib2
            mingw-w64-${{matrix.conf.toolchain}}${{matrix.conf.arch}}-fluidsynth
            mingw-w64-${{matrix.conf.toolchain}}${{matrix.conf.arch}}-munt-mt32emu
            mingw-w64-${{matrix.conf.toolchain}}${{matrix.conf.arch}}-libpng
            mingw-w64-${{matrix.conf.toolchain}}${{matrix.conf.arch}}-opusfile
            mingw-w64-${{matrix.conf.toolchain}}${{matrix.conf.arch}}-SDL2
            mingw-w64-${{matrix.conf.toolchain}}${{matrix.conf.arch}}-SDL2_net
            mingw-w64-${{matrix.conf.toolchain}}${{matrix.conf.arch}}-zlib
      
      - name:  Prepare compiler cache
        id:    prep-ccache
        shell: bash
        run: |
          mkdir -p "${CCACHE_DIR}"
          echo "::set-output name=dir::$CCACHE_DIR"
          echo "::set-output name=today::$(date -I)"
          echo "::set-output name=yesterday::$(date --date=yesterday -I)"
          echo "::set-output name=name_hash::$(echo '${{ matrix.conf.name }}' | shasum | cut -b-8)"

      - uses:  actions/cache@v2
        id:    cache-ccache
        with:
          path: ${{ steps.prep-ccache.outputs.dir }}
          key:  ccache-msys2-${{ matrix.conf.sys }}-${{ steps.prep-ccache.outputs.name_hash }}-${{ steps.prep-ccache.outputs.today }}-1
          restore-keys: |
            ccache-msys2-${{ matrix.conf.sys }}-${{ steps.prep-ccache.outputs.name_hash }}-${{ steps.prep-ccache.outputs.yesterday }}-1

      - name:  Cache subprojects
        uses:  actions/cache@v2
        with:
          path: subprojects/packagecache
          key:  subprojects-${{ hashFiles('subprojects/*.wrap') }}

      - name: Log environment
        run:  ./scripts/log-env.sh

      - name: Setup build
        run: |
          meson setup ${{ matrix.conf.build_flags }} build
      
      - name: Build
        run: |
          set -xo pipefail
          ninja -C build |& tee build.log
          ccache -s
      
      - name: Run tests
        if:   matrix.conf.run_tests
        run:  meson test -C build --print-errorlogs

      - name: Summarize warnings
        if:   matrix.conf.run_tests != true
        env:
          MAX_WARNINGS: ${{ matrix.conf.max_warnings }}
        run:  python ./scripts/count-warnings.py -lf build.log

  build_msys2_release:
    name: ${{ matrix.conf.name }}
    runs-on: windows-latest
    if: github.event_name != 'pull_request' || contains('dreamer,kcgen,ant-222,Wengier,shermp', github.actor) == false
    
    strategy:
      matrix:
        conf:
          - name: GCC (MinGW) x86
            arch: i686
            sys: MINGW32
          - name: GCC (MinGW) x86_64
            arch: x86_64
            sys: MINGW64
    
    defaults:
      run:
        shell: msys2 {0}
   
    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.conf.sys}}
          update: true
          install: >-
            git
            mingw-w64-${{matrix.conf.arch}}-meson
            mingw-w64-${{matrix.conf.arch}}-gcc
            mingw-w64-${{matrix.conf.arch}}-ccache
            mingw-w64-${{matrix.conf.arch}}-pkgconf
            mingw-w64-${{matrix.conf.arch}}-ntldd
            mingw-w64-${{matrix.conf.arch}}-ncurses
            mingw-w64-${{matrix.conf.arch}}-glib2
            mingw-w64-${{matrix.conf.arch}}-fluidsynth
            mingw-w64-${{matrix.conf.arch}}-munt-mt32emu
            mingw-w64-${{matrix.conf.arch}}-libpng
            mingw-w64-${{matrix.conf.arch}}-opusfile
            mingw-w64-${{matrix.conf.arch}}-SDL2
            mingw-w64-${{matrix.conf.arch}}-SDL2_net
            mingw-w64-${{matrix.conf.arch}}-zlib
      
      - name:  Prepare compiler cache
        id:    prep-ccache
        run: |
          mkdir -p "${CCACHE_DIR}"
          echo "::set-output name=dir::$CCACHE_DIR"
          echo "::set-output name=today::$(date -I)"
          echo "::set-output name=yesterday::$(date --date=yesterday -I)"

      - uses:  actions/cache@v2
        id:    cache-ccache
        with:
          path: ${{ steps.prep-ccache.outputs.dir }}
          key:  ccache-msys2-${{matrix.conf.sys}}-release-${{ steps.prep-ccache.outputs.today }}-1
          restore-keys: |
            ccache-msys2-${{matrix.conf.sys}}-release-${{ steps.prep-ccache.outputs.yesterday }}-1

      - name:  Cache subprojects
        uses:  actions/cache@v2
        with:
          path: subprojects/packagecache
          key:  subprojects-${{ hashFiles('subprojects/*.wrap') }}-1
      
      - name: Log environment
        run:  ./scripts/log-env.sh

      - name: Inject version string
        run: |
          set -x
          git fetch --prune --unshallow
          export VERSION=$(git describe --abbrev=5)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      
      - name: Set dest dir names
        run: |
          set -x
          echo PKG_DEST_DIR=dosbox-staging-windows-msys2-${{ matrix.conf.arch }}-${{ env.VERSION }} >> $GITHUB_ENV
          echo PKG_DEST_DIR_DEBUGGER=dosbox-staging-windows-msys2-debugger-${{ matrix.conf.arch }}-${{ env.VERSION }} >> $GITHUB_ENV
      
      - name: Setup release build
        run: |
          meson setup \
            -Dbuildtype=release \
            -Ddefault_library=static \
            -Db_asneeded=true \
            -Dtry_static_libs=png,opusfile \
            build
      
      - name: Build
        run: ninja -C build

      - name: Strip binary
        run: strip build/dosbox.exe
      
      - name: Stage release binary
        run: |
          set -x
          mkdir -p ${{ env.PKG_DEST_DIR }}/
          cp build/dosbox.exe ${{ env.PKG_DEST_DIR }}/
          ntldd -R ${{ env.PKG_DEST_DIR }}/dosbox.exe \
            | sed -e 's/^[[:blank:]]*//g' \
            | cut -d ' ' -f 3 \
            | grep -E -i '(mingw|clang)(32|64)' \
            | sed -e 's|\\|/|g' \
            | xargs cp --target-directory=${{ env.PKG_DEST_DIR }}/
      
      - name: Setup release build w/ debugger
        run: |
          meson configure \
            -Denable_debugger=normal \
            build
      
      - name: Build w/ debugger
        run: ninja -C build

      - name: Strip debugger binary
        run: strip build/dosbox.exe
      
      - name: Stage release binary w/ debugger
        run: |
          set -x
          mkdir -p ${{ env.PKG_DEST_DIR_DEBUGGER }}/
          cp build/dosbox.exe ${{ env.PKG_DEST_DIR_DEBUGGER }}/
          ntldd -R ${{ env.PKG_DEST_DIR_DEBUGGER }}/dosbox.exe \
            | sed -e 's/^[[:blank:]]*//g' \
            | cut -d ' ' -f 3 \
            | grep -E -i '(mingw|clang)(32|64)' \
            | sed -e 's|\\|/|g' \
            | xargs cp --target-directory=${{ env.PKG_DEST_DIR_DEBUGGER }}/
      
      - name: Setup common package dir
        run: |
          set -x
          mkdir -p dest/doc
          cp COPYING               dest/COPYING.txt
          cp docs/README.template  dest/README.txt
          cp docs/README.video     dest/doc/video.txt
          cp README                dest/doc/manual.txt

          # Prepare translation files
          #
          # Note:
          #   We conciously drop the dialect postfix because no dialects are available.
          #   (US was the default DOS dialect and therefore is the default for 'en').
          #   There users get the generic translation and benefit from simpler filenames.
          #   Dialect translations will be added if/when they're available.
          #
          mkdir -p dest/translations
          cp contrib/translations/de/de_DE.lng       dest/translations/de.lng
          cp contrib/translations/en/en_US.lng       dest/translations/en.lng
          cp contrib/translations/es/es_ES.lng       dest/translations/es.lng
          cp contrib/translations/fr/fr_FR.lng       dest/translations/fr.lng
          cp contrib/translations/it/it_IT.lng       dest/translations/it.lng
          cp contrib/translations/pl/pl_PL.CP437.lng dest/translations/pl.cp437.lng
          cp contrib/translations/pl/pl_PL.lng       dest/translations/pl.lng
          cp contrib/translations/ru/ru_RU.lng       dest/translations/ru.lng

          # Fill README template file
          sed -i "s|%GIT_COMMIT%|$GITHUB_SHA|"               dest/README.txt
          sed -i "s|%GIT_BRANCH%|${GITHUB_REF#refs/heads/}|" dest/README.txt
          sed -i "s|%GITHUB_REPO%|$GITHUB_REPOSITORY|"       dest/README.txt

          # Create dir for zipping
      
      - name: Package release
        run: |
            set -x
            cp -r dest/. ${PKG_DEST_DIR}/
      
      - name: Package release w/ debugger
        run: |
            set -x
            cp -r dest/. ${{ env.PKG_DEST_DIR_DEBUGGER }}/
          
      
      - name: Windows Defender AV Scan
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          $dosboxDirs = "${{ github.workspace }}\${{ env.PKG_DEST_DIR }}", "${{ github.workspace }}\${{ env.PKG_DEST_DIR_DEBUGGER }}"
          foreach ($dosboxDir in $dosboxDirs)
          {
            & 'C:\Program Files\Windows Defender\MpCmdRun.exe' -Scan -ScanType 3 -DisableRemediation -File $dosboxDir
            if( $LASTEXITCODE -ne 0 ) {
                Get-Content -Path $env:TEMP\MpCmdRun.log
                Throw "Exit $LASTEXITCODE : Windows Defender found an issue"
            }
          }

      - name: Upload release package
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PKG_DEST_DIR }}
          path: ${{ env.PKG_DEST_DIR }}

      - name: Upload debugger package
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PKG_DEST_DIR_DEBUGGER }}
          path: ${{ env.PKG_DEST_DIR_DEBUGGER }}
