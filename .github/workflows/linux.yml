name: Linux builds
permissions: read-all

on:
  push:
    paths-ignore:
      - '.clang-format'
      - '.mdl-styles'
      - '*.md'
      - 'docs/**'
      - 'licenses/**'
      - 'website/**'

  pull_request:
    paths-ignore:
      - '.clang-format'
      - '.mdl-styles'
      - '*.md'
      - 'docs/**'
      - 'licenses/**'
      - 'website/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_linux:
    name:    ${{ matrix.conf.name }} ${{ matrix.arch }}
    runs-on: ${{ matrix.conf.os }}${{ matrix.arch == 'arm64' && '-arm' || '' }}
    if:      github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    strategy:
      matrix:
#       TODO enable arm64 builds
#        arch: [x64, arm64]
        arch: [x64]
        conf:
          - name: GCC 12, Ubuntu 22.04
            os: ubuntu-22.04
            cmake_preset: release-linux-vcpkg
            cc:  gcc
            cxx: g++
            max_warnings: 0

          - name: Clang 15, Ubuntu 22.04
            os: ubuntu-22.04
            cmake_preset: release-linux-vcpkg
            cc:  clang
            cxx: clang++
            max_warnings: 0

          - name: GCC 12, Ubuntu 22.04, debugger build
            os: ubuntu-22.04
            cmake_preset: debug-linux-vcpkg
            cmake_flags: -DOPT_HEAVY_DEBUG=ON
            cc:  gcc
            cxx: g++
            max_warnings: 0

          # TODO turn this into a minimal build target once we have CMake
          # feature toggling implemented
          - name: GCC 11, Ubuntu 22.04
            os: ubuntu-22.04
            cmake_preset: release-linux-vcpkg
            cc:  gcc
            cxx: g++
            max_warnings: 0

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Set common vars
        uses: ./.github/actions/set-common-vars

      - name: Set up CMake
        uses: lukka/get-cmake@f3273e0bcecf2f2c0d3430de21bf02ab2752c47d # v4.1.0

      - name: Install dependencies
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install -y $(cat packages/ubuntu-22.04-apt.txt)

      - name: Set up vcpkg
        uses: ./.github/actions/setup-vcpkg
        with:
          name_os: linux
          arch: "${{ matrix.arch }}"
          compiler: "${{ matrix.conf.cc }}"

      - name: Log environment
        run: ./scripts/ci/log-env.sh

      - name: Build
        run: |
          set -xo pipefail
          export CC=${{ matrix.conf.cc }}
          export CXX=${{ matrix.conf.cxx }}
          cmake ${{ matrix.conf.cmake_flags }} --preset ${{ matrix.conf.cmake_preset }}
          cmake --build --preset ${{ matrix.conf.cmake_preset }} 2>&1 | tee build.log

      - name: Run tests
        run: |
          set -xo pipefail
          ctest --preset ${{ matrix.conf.cmake_preset }} 2>&1 | tee tests.log

      - name: Summarize warnings
        env:
          MAX_WARNINGS: ${{ matrix.conf.max_warnings }}
        run:  ./scripts/ci/count-warnings.py -lf build.log


  build_linux_release:
    name:    Release build
    runs-on: ubuntu-22.04
    if:      github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Set common vars
        uses: ./.github/actions/set-common-vars

      - name: Set up CMake
        uses: lukka/get-cmake@f3273e0bcecf2f2c0d3430de21bf02ab2752c47d # v4.1.0

      - name: Install all dependencies
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install -y $(cat packages/ubuntu-22.04-apt.txt)

      - name: Set up vcpkg
        uses: ./.github/actions/setup-vcpkg
        with:
          name_os: linux
          arch: "x64"
          compiler: "gcc"

      - name: Log environment
        run: ./scripts/ci/log-env.sh

      - name: Build release
        run: |
          set -x
          cmake --preset release-linux-vcpkg
          cmake --build --preset release-linux-vcpkg

      - name: Dump workspace contents
        run: find $RUNNER_WORKSPACE

      - name: Verify executable RPATH
        run: |
          set -x
          objdump -x build/release-linux/dosbox | grep \$ORIGIN/lib

      - name: Package
        run: |
          echo "*** dosbox transitive deps:"
          ldd build/release-linux/dosbox

          ./scripts/packaging/create-package.sh \
              -p linux \
              build/release-linux \
              "dosbox-staging-linux-x86_64-$DOSBOX_VERSION_AND_HASH"


      - name: Inject external vcpkg dependencies
        run: |
          set -x
          ZIP_NAME=dosbox-vcpkg-deps-linux-x86_64.zip

          wget -nv https://github.com/dosbox-staging/dosbox-staging-ext/releases/download/$VCPKG_EXT_DEPS_VERSION/$ZIP_NAME
          unzip $ZIP_NAME -d vcpkg-deps

          LIB_DIR="dosbox-staging-linux-x86_64-$DOSBOX_VERSION_AND_HASH/lib"
          mkdir $LIB_DIR
          cp vcpkg-deps/release/* $LIB_DIR


      - name:  Inject Nuked-SC55-CLAP plugin
        run: |
          set -x
          ZIP_NAME=Nuked-SC55-CLAP-linux-x86_64-$NUKED_SC55_CLAP_VERSION.zip

          curl -L https://github.com/johnnovak/Nuked-SC55-CLAP/releases/download/$NUKED_SC55_CLAP_VERSION/$ZIP_NAME -o $ZIP_NAME
          unzip $ZIP_NAME -d nuked-sc55-clap

          PLUGINS_DIR="dosbox-staging-linux-x86_64-$DOSBOX_VERSION_AND_HASH/plugins"
          mkdir $PLUGINS_DIR
          cp nuked-sc55-clap/* $PLUGINS_DIR


      - name: Create tarball
        run: |
          tar -cJf "dosbox-staging-linux-x86_64-$DOSBOX_VERSION_AND_HASH.tar.xz" \
              "dosbox-staging-linux-x86_64-$DOSBOX_VERSION_AND_HASH"

      - name: Upload tarball
        uses: actions/upload-artifact@v4
        # GitHub automatically zips the artifacts (there's no way to create
        # a tarball), and it removes all executable flags while zipping.
        # Letting it zip a tarball preserves flags in the compressed files.
        with:
          name: dosbox-staging-linux-x86_64-${{ env.DOSBOX_VERSION_AND_HASH }}
          path: dosbox-staging-linux-x86_64-${{ env.DOSBOX_VERSION_AND_HASH }}.tar.xz
