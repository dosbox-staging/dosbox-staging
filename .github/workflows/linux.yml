name: Linux builds

on:
  push:
    paths-ignore:
      - '.clang-format'
      - '.mdl-styles'
      - '*.md'
      - 'docs/**'
      - 'licenses/**'
      - 'website/**'

  pull_request:
    paths-ignore:
      - '.clang-format'
      - '.mdl-styles'
      - '*.md'
      - 'docs/**'
      - 'licenses/**'
      - 'website/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Docker commmand to run if performing cross builds.defaults:
  # The command removes the container on exit, runs the 
  # container as the specified UID:GID, mounts the current
  # dir into the container at the same path, passes in host 
  # HOME environment variable, sets the container working directory 
  # and specifies the image to use. The tag is added in the jobs.
  DOCKER_RUN: >-
    docker run --rm
    -u "$(id --user):$(id --group)"
    -v "$PWD:$PWD"
    -e HOME
    --workdir "$PWD"
    ghcr.io/dosbox-staging/debian-cross

jobs:
  cache_subprojects:
    name: Cache subprojects
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Install Meson
        run:  |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install -y python3-setuptools
          sudo pip3 install --upgrade meson

      - name: Cache subprojects
        id:   cache-subprojects
        uses: actions/cache@v4.0.1
        with:
          path: subprojects.tar
          key: subprojects-${{ hashFiles('subprojects/*.wrap') }}-1
          enableCrossOsArchive: true

      - if:   steps.cache-subprojects.outputs.cache-hit != 'true'
        name: Generate subprojects cache
        run:  scripts/fetch-and-tar-subprojects.sh

  build_ubuntu:
    name: ${{ matrix.conf.name }}
    runs-on: ${{ matrix.conf.os }}
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    needs: cache_subprojects
    strategy:
      matrix:
        conf:

          - name: GCC 12, Ubuntu 22.04
            os: ubuntu-22.04
            packages: g++-12
            build_flags: -Dbuildtype=debug --native-file=.github/meson/native-gcc-12.ini
            max_warnings: 0
            needs_all_deps: true
            run_tests: true

          - name: Clang 15, Ubuntu 22.04
            os: ubuntu-22.04
            packages: clang-15
            build_flags: -Dbuildtype=debug --native-file=.github/meson/native-clang-15.ini
            max_warnings: 0
            needs_all_deps: true
            run_tests: true

          - name: GCC 12, Ubuntu 22.04, debugger build
            os: ubuntu-22.04
            packages: g++-12
            build_flags: -Denable_debugger=heavy --native-file=.github/meson/native-gcc-12.ini
            max_warnings: 0
            needs_all_deps: true

          - name: GCC 11, Ubuntu 22.04, minimal build
            os: ubuntu-22.04
            build_flags: >-
              -Dbuildtype=minsize
              -Dunit_tests=disabled
              -Duse_alsa=false
              -Duse_fluidsynth=false
              -Duse_mt32emu=false
              -Duse_opengl=false
              -Duse_sdl2_net=false
              -Duse_slirp=false
            needs_min_deps: true
            max_warnings: -1

          - name: GCC 11, Debian 11, ARMv7
            os: ubuntu-22.04
            build_flags: -Dbuildtype=debug -Duse_zlib_ng=false --cross-file dosbox-cross
            max_warnings: 0
            run_tests: true
            cross: true
            arch: armhf
            deb_vers: 11
            needs_min_deps: false

          - name: GCC 11, Debian 11, aarch64
            os: ubuntu-22.04
            build_flags: -Dbuildtype=debug --cross-file dosbox-cross
            max_warnings: 0
            run_tests: true
            cross: true
            arch: arm64
            deb_vers: 11
            needs_min_deps: false

          - name: GCC 11, Debian 11, ppc64le
            os: ubuntu-22.04
            build_flags: -Dbuildtype=debug --cross-file dosbox-cross
            max_warnings: 21
            run_tests: true
            cross: true
            arch: ppc64el
            deb_vers: 11
            needs_min_deps: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: false
      
      # Note: not run for cross builds
      - name: Install minimum dependencies
        if:  matrix.conf.needs_min_deps
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install -y build-essential libsdl2-dev libopusfile-dev libspeexdsp-dev python3-setuptools
          sudo pip3 install --upgrade meson ninja
      
      # Note: not run for cross builds
      - name: Install all dependencies
        if:   matrix.conf.needs_all_deps
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install -y \
            ${{ matrix.conf.packages }} \
            $(cat packages/${{ matrix.conf.os }}-apt.txt)
          sudo pip3 install --upgrade meson ninja

      - name: Log environment
        run:  ./scripts/log-env.sh

      # Uses the ./scripts/docker-cross-tag.sh helper script
      # to set the docker image tag, and check if it exists
      # in the registry.
      - name: Get docker image tag and test if exists
        if: matrix.conf.cross
        id: docker_tag
        run: |
          tag_hash=$(./scripts/docker-cross-tag.sh hash-files ./packages/Dockerfile.debian ./packages/debian-11-docker-apt.txt)
          tag="${{matrix.conf.deb_vers}}-${{matrix.conf.arch}}-${tag_hash}"
          echo "IMG_TAG=${tag}" >> $GITHUB_OUTPUT
          echo "IMG_TAG_EXISTS=$(./scripts/docker-cross-tag.sh tag-exists debian-cross $tag)" >> $GITHUB_OUTPUT
      
      # If the image tag does not exist (from previous step), 
      # Build a new image and push it to the registry using 
      # the composite action created for the task.
      - name: Build debian cross docker image if required
        if: ${{ matrix.conf.cross && steps.docker_tag.outputs.IMG_TAG_EXISTS == 'false' }}
        uses: ./.github/composite-actions/build-debian-docker
        with:
          img-name: debian-cross
          deb-vers: ${{matrix.conf.deb_vers}}
          arch: ${{matrix.conf.arch}}
          tag: ${{ steps.docker_tag.outputs.IMG_TAG }}
          user: ${{ github.actor }}
          pass: ${{ secrets.GITHUB_TOKEN }}

      # Set either host meson or docker command depending on
      # if we are cross compiling
      - name: Set binary names
        id: bins
        run: |
          if [ -z "${{matrix.conf.cross}}" ]; then
            echo "MESON_BIN=meson" >> $GITHUB_OUTPUT
          else
            echo "MESON_BIN=${{env.DOCKER_RUN}}:${{steps.docker_tag.outputs.IMG_TAG}} meson" >> $GITHUB_OUTPUT
          fi

      - name: Restore subprojects cache
        id:   cache-subprojects
        uses: actions/cache@v4.0.1
        with:
          path: subprojects.tar
          key: subprojects-${{ hashFiles('subprojects/*.wrap') }}-1
          enableCrossOsArchive: true

      - name: Extract subprojects cache
        run:  scripts/extract-subprojects-tar.sh

      - name: Meson setup
        run:  |
          ${{steps.bins.outputs.MESON_BIN}} setup ${{ matrix.conf.build_flags }} build \
          || ( cat build/meson-logs/meson-log.txt ; exit 1 )

      - name: Build
        run: |
          set -xo pipefail
          ${{steps.bins.outputs.MESON_BIN}} compile -C build |& tee build.log

      - name: Run tests
        if:   matrix.conf.run_tests
        run:  ${{steps.bins.outputs.MESON_BIN}} test --num-processes 128 -t 0 -C build --print-errorlogs

      - name: Summarize warnings
        env:
          MAX_WARNINGS: ${{ matrix.conf.max_warnings }}
        run:  ./scripts/count-warnings.py -lf build.log


  build_linux_release:
    name: Release build
    runs-on: ubuntu-22.04
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    needs: cache_subprojects
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: false

      - run:  sudo apt-get update

      - name: Install dependencies
        run: |
          sudo apt-get install -y tree \
            $(cat packages/ubuntu-22.04-apt.txt)
          sudo pip3 install --upgrade meson ninja

      - name: Restore subprojects cache
        id:   cache-subprojects
        uses: actions/cache@v4.0.1
        with:
          path: subprojects.tar
          key: subprojects-${{ hashFiles('subprojects/*.wrap') }}-1
          enableCrossOsArchive: true

      - name: Extract subprojects cache
        run:  scripts/extract-subprojects-tar.sh

      - name: Log environment
        run:  ./scripts/log-env.sh

      - name: Inject version string
        run: |
          set -x
          VERSION=$(./scripts/get-version.sh version-and-hash)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Setup release build
        run: |
          meson setup \
            -Duse_xinput2=false \
            -Duse_zlib_ng=sse2,ssse3,neon \
            -Ddefault_library=static \
            --wrap-mode=forcefallback \
            -Db_lto=true -Db_lto_threads=$(nproc) \
            build \
          || ( cat build/meson-logs/meson-log.txt ; exit 1 )


      - name: Build
        run:  meson compile -C build

      - name: Package
        run: |
          ./scripts/create-package.sh \
            -p linux \
            build \
            "dosbox-staging-linux-x86_64-$VERSION"

      - name: Create tarball
        run: |
          tar -cJf "dosbox-staging-linux-x86_64-$VERSION.tar.xz" \
            "dosbox-staging-linux-x86_64-$VERSION"

      - name: Upload tarball
        uses: actions/upload-artifact@v4.3.1
        # GitHub automatically zips the artifacts (there's no way to create
        # a tarball), and it removes all executable flags while zipping.
        # Letting it zip a tarball preserves flags in the compressed files.
        with:
          name: dosbox-staging-linux-x86_64-${{ env.VERSION }}
          path: dosbox-staging-linux-x86_64-${{ env.VERSION }}.tar.xz
