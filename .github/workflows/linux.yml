name: Linux builds

on: [push, pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CCACHE_DIR:      "/dev/shm/.ccache"
  CCACHE_MAXSIZE:  "64M"
  CCACHE_COMPRESS: "true"
  CLAMDB_DIR:      "/var/lib/clamav"
  DOCKER_RUN: >-
    docker run --rm 
    -v "$PWD:$PWD" 
    -v "/dev/shm/.ccache/:/dev/shm/.ccache" 
    -u "$(id --user):$(id --group)" 
    --workdir "$PWD" 
    -e HOME 
    -e CCACHE_DIR 
    -e CCACHE_MAXSIZE 
    -e CCACHE_COMPRESS
    ghcr.io/dosbox-staging/debian-cross

jobs:
  build_ubuntu:
    name: ${{ matrix.conf.name }}
    runs-on: ${{ matrix.conf.os }}
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    strategy:
      matrix:
        conf:
          - name: GCC 8, Debian 10 Cross ARM 64
            os: ubuntu-20.04
            build_flags: -Dbuildtype=debug --cross-file dosbox-cross
            max_warnings: 0
            run_tests: true
            cross: true
            arch: arm64
            deb_vers: 10

          - name: GCC 10, Debian 11 Cross ARM 64
            os: ubuntu-20.04
            build_flags: -Dbuildtype=debug --cross-file dosbox-cross
            max_warnings: 0
            run_tests: true
            cross: true
            arch: arm64
            deb_vers: 11

          - name: GCC 8, Debian 10 Cross ARM 32
            os: ubuntu-20.04
            build_flags: -Dbuildtype=debug --cross-file dosbox-cross
            max_warnings: 0
            run_tests: true
            cross: true
            arch: armhf
            deb_vers: 10

          - name: GCC 10, Debian 11 Cross ARM 32
            os: ubuntu-20.04
            build_flags: -Dbuildtype=debug --cross-file dosbox-cross
            max_warnings: 0
            run_tests: true
            cross: true
            arch: armhf
            deb_vers: 11
            
          - name: GCC 10, Ubuntu 20.04
            os: ubuntu-20.04
            packages: g++-10
            build_flags: -Dbuildtype=debug -Dunit_tests=disabled --native-file=.github/meson/native-gcc-10.ini
            max_warnings: 0

          - name: Clang 12, Ubuntu 20.04
            os: ubuntu-20.04
            packages: clang-12
            build_flags: -Dbuildtype=debug -Dunit_tests=disabled --native-file=.github/meson/native-clang-12.ini
            max_warnings: 0

          - name: GCC, Ubuntu 18.04
            os: ubuntu-18.04
            build_flags: -Dbuildtype=debug -Dunit_tests=disabled --native-file=.github/meson/native-gcc-9.ini
            max_warnings: 0

          - name: GCC, +tests
            os: ubuntu-20.04
            build_flags: -Dbuildtype=debug
            run_tests: true
            max_warnings: -1

          - name: GCC, +debugger
            os: ubuntu-20.04
            build_flags: -Denable_debugger=normal
            max_warnings: 0

          - name: GCC, -dyn-x86
            os: ubuntu-20.04
            build_flags: -Dbuildtype=debug -Dunit_tests=disabled -Ddynamic_core=dynrec
            max_warnings: 0

          - name: GCC, -dyn-x86, +debugger
            os: ubuntu-20.04
            build_flags: -Ddynamic_core=dynrec -Dunit_tests=disabled -Denable_debugger=normal
            max_warnings: 0

          - name: GCC, -network
            os: ubuntu-20.04
            build_flags: -Dbuildtype=debug -Dunit_tests=disabled -Duse_sdl2_net=false -Duse_slirp=false
            max_warnings: 0

          - name: GCC, minimum build
            os: ubuntu-20.04
            build_flags: >-
              -Dbuildtype=debug
              -Dunit_tests=disabled
              -Duse_alsa=false
              -Duse_fluidsynth=false
              -Duse_mt32emu=false
              -Duse_opengl=false
              -Duse_png=false
              -Duse_sdl2_image=false
              -Duse_sdl2_net=false
              -Duse_slirp=false
            min_dependencies: true
            max_warnings: 0

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: false

      - run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          # use the following to force full upgrades
          # sudo apt-get -y upgrade
          # sudo apt-get -y --with-new-pkgs upgrade
          # sudo apt-get -y install -y aptitude
          # echo -e "n\ny\ny" | sudo aptitude -y -f full-upgrade
          # sudo apt-get update
          # sudo apt-get -y upgrade

      - name: Install dependencies (minimum set)
        if:   matrix.conf.min_dependencies
        run: |
          sudo apt-get install -y build-essential ccache libsdl2-dev libopusfile-dev libspeexdsp-dev python3-setuptools
          sudo pip3 install --upgrade meson ninja

      - name: Install dependencies
        if:   matrix.conf.min_dependencies != true
        run: |
          sudo apt-get install -y \
            ${{ matrix.conf.packages }} \
            $(cat packages/${{ matrix.conf.os }}-apt.txt)
          sudo pip3 install --upgrade meson ninja

      - name:  Prepare compiler cache
        id:    prep-ccache
        shell: bash
        run: |
          mkdir -p "${CCACHE_DIR}"
          echo "dir=$CCACHE_DIR"                                                 >> $GITHUB_OUTPUT
          echo "today=$(date -I)"                                                >> $GITHUB_OUTPUT
          echo "yesterday=$(date --date=yesterday -I)"                           >> $GITHUB_OUTPUT
          echo "name_hash=$(echo '${{ matrix.conf.name }}' | shasum | cut -b-8)" >> $GITHUB_OUTPUT

      - uses:  actions/cache@v3.2.2
        id:    cache-ccache
        with:
          path: ${{ steps.prep-ccache.outputs.dir }}
          key:  ccache-${{ matrix.conf.os }}-${{ steps.prep-ccache.outputs.name_hash }}-${{ steps.prep-ccache.outputs.today }}-1
          restore-keys: |
            ccache-${{ matrix.conf.os }}-${{ steps.prep-ccache.outputs.name_hash }}-${{ steps.prep-ccache.outputs.yesterday }}-1

      - name:  Cache subprojects
        uses:  actions/cache@v3.2.2
        with:
          path: subprojects/packagecache
          key:  subprojects-${{ hashFiles('subprojects/*.wrap') }}

      - name: Log environment
        run:  ./scripts/log-env.sh

      - name: Set binary names
        id: bins
        run: |
          set -x
          git fetch --prune --unshallow
          git fetch --all --tags --force
          if [ -z "${{matrix.conf.cross}}" ]; then
            echo "MESON_BIN=meson" >> $GITHUB_OUTPUT
            echo "CCACHE_BIN=ccache" >> $GITHUB_OUTPUT
          else
            if $(git describe | grep -qs '-'); then
              vers="${{matrix.conf.deb_vers}}-$(git describe | cut -d '-' -f 1)-dev-${{matrix.conf.arch}}"
            else
              vers="${{matrix.conf.deb_vers}}-$(git describe)-${{matrix.conf.arch}}"
            fi
            echo "MESON_BIN=${{env.DOCKER_RUN}}:${vers} meson" >> $GITHUB_OUTPUT
            echo "CCACHE_BIN=${{env.DOCKER_RUN}}:${vers} ccache" >> $GITHUB_OUTPUT
          fi

      - name: Meson setup
        run:  ${{steps.bins.outputs.MESON_BIN}} setup ${{ matrix.conf.build_flags }} build

      - name: Build
        run: |
          set -xo pipefail
          ${{steps.bins.outputs.MESON_BIN}} compile -C build |& tee build.log
          ${{steps.bins.outputs.CCACHE_BIN}} -s

      - name: Run tests
        if:   matrix.conf.run_tests
        run:  ${{steps.bins.outputs.MESON_BIN}} test --num-processes 128 -t 0 -C build --print-errorlogs

      - name: Summarize warnings
        if:   matrix.conf.cross == true || matrix.conf.run_tests != true
        env:
          MAX_WARNINGS: ${{ matrix.conf.max_warnings }}
        run:  ./scripts/count-warnings.py -lf build.log


  build_linux_release:
    name: Release build
    runs-on: ubuntu-18.04
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: false

      - run:  sudo apt-get update

      - name: Install dependencies
        run: |
          sudo apt-get install -y tree \
            $(cat packages/ubuntu-18.04-apt.txt)
          sudo pip3 install --upgrade meson ninja

      # Workaround frequent HTTPS-based connectivity issues
      # https://gitlab.freedesktop.org/freedesktop/freedesktop/-/issues/407
      - name:  Fetch the libffi subproject for Glib
        run: ./scripts/fetch-libffi-subproject.sh

      - name:  Prepare compiler cache
        id:    prep-ccache
        shell: bash
        run: |
          mkdir -p "${CCACHE_DIR}"
          echo "dir=$CCACHE_DIR"                       >> $GITHUB_OUTPUT
          echo "today=$(date -I)"                      >> $GITHUB_OUTPUT
          echo "yesterday=$(date --date=yesterday -I)" >> $GITHUB_OUTPUT

      - uses:  actions/cache@v3.2.2
        id:    cache-ccache
        with:
          path: ${{ steps.prep-ccache.outputs.dir }}
          key:  ccache-linux-release-${{ steps.prep-ccache.outputs.today }}-1
          restore-keys: |
            ccache-linux-release-${{ steps.prep-ccache.outputs.yesterday }}-1

      - name:  Cache subprojects
        uses:  actions/cache@v3.2.2
        with:
          path: subprojects/packagecache
          key:  subprojects-${{ hashFiles('subprojects/*.wrap') }}-1

      - name: Log environment
        run:  ./scripts/log-env.sh

      - name: Inject version string
        run: |
          set -x
          git fetch --prune --unshallow
          git fetch --all --tags --force
          export VERSION=$(git describe --abbrev=5)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Setup release build
        run: |
          meson setup \
            -Duse_xinput2=false \
            -Ddefault_library=static \
            --wrap-mode=forcefallback \
            -Db_lto=true -Db_lto_threads=$(nproc) \
            --native-file=.github/meson/native-gcc-9.ini \
            build

      - name: Build
        run:  meson compile -C build

      - name: Package
        run: |
          ./scripts/create-package.sh \
            -p linux \
            build \
            "dosbox-staging-linux-$VERSION"

      - name: Create tarball
        run: tar -cJf "dosbox-staging-linux-$VERSION.tar.xz" "dosbox-staging-linux-$VERSION"

      - name:  Prepare Clam AV DB cache
        id:    prep-clamdb
        shell: bash
        run: |
          sudo mkdir -p "${CLAMDB_DIR}"
          sudo chmod 777 "${CLAMDB_DIR}"
          echo "today=$(date -I)"                      >> $GITHUB_OUTPUT
          echo "yesterday=$(date --date=yesterday -I)" >> $GITHUB_OUTPUT
      - uses:  actions/cache@v3.2.2
        id:    cache-clamdb
        with:
          path: ${{ env.CLAMDB_DIR }}/*.cvd
          key:  clamdb-linux-${{ steps.prep-clamdb.outputs.today }}-1
          restore-keys: |
            clamdb-linux-${{ steps.prep-clamdb.outputs.yesterday }}-1

      - name: Clam AV scan
        run: |
          set -x
          sudo apt-get install clamav
          sudo systemctl stop clamav-freshclam
          sudo sed -i 's/30/20000/g' /etc/clamav/freshclam.conf
          sudo freshclam --foreground
          clamscan --heuristic-scan-precedence=yes --recursive --infected .

      - name: Upload tarball
        uses: actions/upload-artifact@v3
        # GitHub automatically zips the artifacts (there's no way to create
        # a tarball), and it removes all executable flags while zipping.
        # Letting it zip a tarball preserves flags in the compressed files.
        with:
          name: dosbox-staging-linux-x86_64
          path: dosbox-staging-linux-${{ env.VERSION }}.tar.xz


  # This job exists only to publish an artifact with version info when building
  # from main branch, so snapshot build version will be visible on:
  # https://dosbox-staging.github.io/downloads/devel/
  #
  publish_additional_artifacts:
    name: Publish additional artifacts
    needs: build_linux_release
    runs-on: ubuntu-18.04
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: false

      - name: Generate changelog
        run: |
          set +x
          git fetch --unshallow
          git fetch --all --tags --force
          VERSION=$(git describe --abbrev=4)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          NEWEST_TAG=$(git describe --abbrev=0)
          git log "$NEWEST_TAG..HEAD" > changelog-$VERSION.txt
      - uses: actions/upload-artifact@v3
        with:
          # Keep exactly this artifact name; it's being used to propagate
          # version info via GitHub REST API
          name: changelog-${{ env.VERSION }}.txt
          path: changelog-${{ env.VERSION }}.txt
