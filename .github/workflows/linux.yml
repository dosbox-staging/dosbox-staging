name: Linux builds

on: [push, pull_request]

env:
  CCACHE_DIR:      "/dev/shm/.ccache"
  CCACHE_MAXSIZE:  "64M"
  CCACHE_COMPRESS: "true"

jobs:
  build_ubuntu:
    name: ${{ matrix.conf.name }}
    runs-on: ${{ matrix.conf.os }}
    if: github.event_name != 'pull_request' || contains('dreamer,kcgen,ant-222', github.actor) == false
    strategy:
      matrix:
        conf:
          - name: GCC-5 (Ubuntu 16.04)
            os: ubuntu-16.04
            flags: -c gcc
            max_warnings: 55
          - name: GCC-7 (Ubuntu 18.04)
            os: ubuntu-18.04
            flags: -c gcc
            max_warnings: 57
          - name: GCC-9 (Ubuntu 18.04)
            os: ubuntu-18.04
            flags: -c gcc -v 9
            max_warnings: 57
          - name: Clang-8 (Ubuntu 18.04)
            os: ubuntu-18.04
            flags: -c clang -v 8
            max_warnings: 38
    steps:
      - uses: actions/checkout@v2
      - run:  sudo apt-get update
      - name: Install C++ compiler and libraries
        run:  sudo apt-get install -y $(./scripts/list-build-dependencies.sh -m apt ${{ matrix.conf.flags }})
      - name:  Prepare compiler cache
        id:    prep-ccache
        shell: bash
        run: |
          mkdir -p "${CCACHE_DIR}"
          echo "::set-output name=dir::$CCACHE_DIR"
          echo "::set-output name=today::$(date -I)"
          echo "::set-output name=yesterday::$(date --date=yesterday -I)"
      - uses:  actions/cache@v1
        id:    cache-ccache
        with:
          path: ${{ steps.prep-ccache.outputs.dir }}
          key:  ccache-${{ matrix.conf.name }}-${{ steps.prep-ccache.outputs.today }}
          restore-keys: |
            ccache-${{ matrix.conf.name }}-${{ steps.prep-ccache.outputs.yesterday }}
      - name: Log environment
        run:  ./scripts/log-env.sh
      - name: Build
        run:  ./scripts/build.sh --build-type Debug ${{ matrix.conf.flags }}
      - name: Summarize warnings
        env:
          MAX_WARNINGS: ${{ matrix.conf.max_warnings }}
        run:  ./scripts/count-warnings.py build.log

  build_linux_release_dynamic:
    name: Release build (dynamic)
    runs-on: ubuntu-18.04
    if: github.event_name != 'pull_request' || contains('dreamer,kcgen,ant-222', github.actor) == false
    steps:
      - uses: actions/checkout@v2
      - run:  sudo apt-get update
      - name: Install C++ compiler and libraries
        run:  sudo apt-get install -y tree libpng-dev librsvg2-bin $(./scripts/list-build-dependencies.sh -m apt -c gcc)
      - name:  Prepare compiler cache
        id:    prep-ccache
        shell: bash
        run: |
          mkdir -p "${CCACHE_DIR}"
          echo "::set-output name=dir::$CCACHE_DIR"
          echo "::set-output name=today::$(date -I)"
          echo "::set-output name=yesterday::$(date --date=yesterday -I)"
      - uses:  actions/cache@v1
        id:    cache-ccache
        with:
          path: ${{ steps.prep-ccache.outputs.dir }}
          key:  ccache-linux-release-${{ steps.prep-ccache.outputs.today }}
          restore-keys: |
            ccache-linux-release-${{ steps.prep-ccache.outputs.yesterday }}
      - name: Log environment
        run:  ./scripts/log-env.sh
      - name: Inject version string
        run: |
          set -x
          git fetch --prune --unshallow
          export VERSION=$(git describe --abbrev=4)
          sed -i "s/AC_INIT(dosbox,git)/AC_INIT(dosbox,$VERSION)/" configure.ac
          echo ::set-env name=VERSION::$VERSION
      - name: Build
        env:
          AR: gcc-ar
          CC: ccache gcc
          CXX: ccache g++
          LD: gcc
          RANLIB: gcc-ranlib
          FLAGS: >-
            -O3 -fstrict-aliasing -fno-signed-zeros -fno-trapping-math
            -fassociative-math -mfpmath=sse -msse4.2 -flto -ffunction-sections
            -fdata-sections -DNDEBUG -pipe
          LINKFLAGS: -Wl,--as-needed
        run: |
          set -x
          ./autogen.sh
          ./configure \
              CFLAGS="$FLAGS" CXXFLAGS="$FLAGS" \
              LDFLAGS="$FLAGS $LINKFLAGS -flto=$(nproc)" \
              --enable-png-static
          make -j "$(nproc)"
          strip src/dosbox
      - name: Package
        run: |
          set -x

          # Prepare content
          install -DT        src/dosbox           dest/dosbox
          install -DT -m 644 docs/README.template dest/README
          install -DT -m 644 COPYING              dest/COPYING
          install -DT -m 644 README               dest/doc/manual.txt
          install -DT -m 644 docs/README.video    dest/doc/video.txt
          install -DT -m 644 docs/dosbox.1        dest/man/dosbox.1

          # Generate .desktop entry and icon files
          install -DT contrib/linux/dosbox-staging.desktop dest/desktop/dosbox-staging.desktop
          make -C contrib/icons/ hicolor
          mkdir -p dest/icons
          mv contrib/icons/hicolor dest/icons

          # Fill README template file
          sed -i "s|%GIT_COMMIT%|$GITHUB_SHA|"               dest/README
          sed -i "s|%GIT_BRANCH%|${GITHUB_REF#refs/heads/}|" dest/README
          sed -i "s|%GITHUB_REPO%|$GITHUB_REPOSITORY|"       dest/README
          mv dest "dosbox-staging-linux-$VERSION"
          tree --si -p "dosbox-staging-linux-$VERSION"

          # Create tarball
          tar -cJf "dosbox-staging-linux-$VERSION.tar.xz" "dosbox-staging-linux-$VERSION"

      - name: Clam AV scan
        run: |
          set -x
          sudo apt-get install clamav > /dev/null
          sudo systemctl stop clamav-freshclam
          sudo freshclam --quiet && sudo freshclam
          clamscan --heuristic-scan-precedence=yes --recursive --infected .
      - name: Upload tarball
        uses: actions/upload-artifact@master
        # GitHub automatically zips the artifacts (there's no way to create
        # a tarball), and it removes all executable flags while zipping.
        # Letting it zip a tarball preserves flags in the compressed files.
        with:
          name: dosbox-staging-linux-x86_64
          path: dosbox-staging-linux-${{ env.VERSION }}.tar.xz
