name: Linux builds
on: push

jobs:

  build_ubuntu:
    name: ${{ matrix.conf.name }}
    runs-on: ${{ matrix.conf.os }}
    strategy:
      matrix:
        conf:
          - name: GCC-5 (Ubuntu 16.04)
            os: ubuntu-16.04
            flags: -c gcc
            max_warnings: 96
          - name: GCC-7 (Ubuntu 18.04)
            os: ubuntu-18.04
            flags: -c gcc
            max_warnings: 98
          - name: GCC-9 (Ubuntu 18.04)
            os: ubuntu-18.04
            flags: -c gcc -v 9
            max_warnings: 117
          - name: Clang-8 (Ubuntu 18.04)
            os: ubuntu-18.04
            flags: -c clang -v 8
            max_warnings: 63
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - run:  sudo apt-get update
      - name: Install C++ compiler and libraries
        run:  sudo apt-get install -y $(./scripts/list-build-dependencies.sh -m apt ${{ matrix.conf.flags }})
      - name: Log environment
        run:  ./scripts/log-env.sh
      - name: Build
        run:  ./scripts/build.sh --build-type Debug ${{ matrix.conf.flags }}
      - name: Summarize warnings
        env:
          MAX_WARNINGS: ${{ matrix.conf.max_warnings }}
        run:  ./scripts/count-warnings.py build.log

  build_linux_release_dynamic:
    name: Release build (dynamic)
    runs-on: ubuntu-16.04
    steps:
      - uses: actions/checkout@v1
      - run:  sudo apt-get update
      - name: Install C++ compiler and build dependencies
        run: |
          set -x
          sudo apt-get update -y
          sudo apt-get install -y tree libpng16-dev $(./scripts/list-build-dependencies.sh -m apt -c gcc -v 9)
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 60 --slave /usr/bin/g++ g++ /usr/bin/g++-9
          sudo update-alternatives --config gcc
          sudo apt-get install -y libelf-dev libssl-dev parallel
      - name: Log environment
        run:  ./scripts/log-env.sh
      - name: Inject version string
        run: |
          set -x
          export VERSION=$(git describe --abbrev=4)
          sed -i "s/AC_INIT(dosbox,git)/AC_INIT(dosbox,$VERSION)/" configure.ac
          echo ::set-env name=VERSION::$VERSION
      - name: Prepare for AutoFDO installation
        id: prep-afdo
        run: |
          mkdir -p afdo
          echo ::set-output name=gcc-version::$(gcc --version | grep ^gcc | sed 's/^.* //g')
      - uses: actions/cache@v1
        id: restore-afdo
        with:
          path: afdo
          key: afdo-for-gcc-${{ steps.prep-afdo.outputs.gcc-version }}
      - name: Install AutoFDO package
        if:   steps.restore-afdo.outputs.cache-hit != 'true'
        run:  ./.github/scripts/build-autofdo.sh
      - name: Convert AutoFDO profiles
        run: ./.github/scripts/fetch-and-merge-afdo.sh
      - name: Build
        env:
          AR: gcc-ar-9
          CC: gcc-9
          CXX: g++-9
          LD: gcc-9
          RANLIB: gcc-ranlib-9
          FLAGS: -O2 -flto -fauto-profile=${{ github.workspace }}/current.afdo -ffunction-sections -fdata-sections -DNDEBUG -pipe
          LINKFLAGS: -Wl,--as-needed -pipe -flto=4
        run: |
          set -x
          ./autogen.sh
          ./configure CFLAGS="$FLAGS" CXXFLAGS="$FLAGS" LDFLAGS="$FLAGS $LINKFLAGS" --disable-screenshots || cat config.log
          make -j "$(nproc)"
          strip src/dosbox
      - name: Package
        run: |
          set -x
          # Prepare content
          install -DT        src/dosbox           dest/dosbox
          install -DT -m 644 docs/README.template dest/README
          install -DT -m 644 COPYING              dest/COPYING
          install -DT -m 644 README               dest/doc/manual.txt
          install -DT -m 644 docs/README.video    dest/doc/video.txt
          install -DT -m 644 docs/dosbox.1        dest/man/dosbox.1
          # Fill README template file
          sed -i "s|%GIT_COMMIT%|$GITHUB_SHA|"               dest/README
          sed -i "s|%GIT_BRANCH%|${GITHUB_REF#refs/heads/}|" dest/README
          sed -i "s|%GITHUB_REPO%|$GITHUB_REPOSITORY|"       dest/README
          mv dest "dosbox-staging-linux-$VERSION"
          tree --si -p "dosbox-staging-linux-$VERSION"
          # Create tarball
          tar -cJf "dosbox-staging-linux-$VERSION.tar.xz" "dosbox-staging-linux-$VERSION"
      - name: Upload tarball
        uses: actions/upload-artifact@master
        # GitHub automatically zips the artifacts (there's no way to create
        # a tarball), and it removes all executable flags while zipping.
        # Letting it zip a tarball preserves flags in the compressed files.
        with:
          name: dosbox-staging-linux-x86_64
          path: dosbox-staging-linux-${{ env.VERSION }}.tar.xz
