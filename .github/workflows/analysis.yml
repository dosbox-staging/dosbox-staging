name: Code analysis
on: push
jobs:
  run_linters:
    name: Script linters
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - run:  sudo apt-get update
      - name: Run shellcheck
        run:  ./scripts/verify-bash.sh
      - name: Install pylint
        run:  |
          sudo apt-get install python3-setuptools
          sudo pip3 install pylint beautifulsoup4 html5lib
      - name: Run pylint
        run:  ./scripts/verify-python.sh
      - name: Install markdownlint
        run:  |
          sudo apt-get install ruby
          sudo gem install mdl
          sudo chmod go-w /usr/share/rust/.cargo/bin
      - name: Run markdownlint
        run:  ./scripts/verify-markdown.sh

  build_clang_static_analyser:
    name: Clang static analyzer
    runs-on: ubuntu-18.04
    needs: run_linters
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - run:  sudo apt-get update
      - name: Install C++ compiler and libraries
        run:  sudo apt-get install python3-setuptools $(./scripts/list-build-dependencies.sh -m apt -c gcc)
      - name: Install scan-build (Python version)
        run:  sudo pip3 install scan-build beautifulsoup4 html5lib
      - name: Log environment
        run:  ./scripts/log-env.sh
      - name: Build
        run:  |
          # build steps
          set -x
          g++ --version
          ./autogen.sh
          ./configure
          intercept-build make -j "$(nproc)"
      - name: Analyze
        run:  analyze-build -v -o report --html-title="dosbox-staging (${GITHUB_SHA:0:8})"
      - name: Upload report
        uses: actions/upload-artifact@master
        with:
          name: clang-analysis-report
          path: report
      - name: Summarize report
        env:
          MAX_BUGS: 76
        run: |
          # summary
          echo "Full report is included in build Artifacts"
          echo
          ./scripts/count-bugs.py report/*/index.html

  build_pvs_studio_analyzer:
    name: PVS-Studio static analyzer
    runs-on: ubuntu-latest
    needs: run_linters
    env:
      debfile: pvs-studio-7.05.35582.25-amd64.deb
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - run:  sudo apt-get update
      - name: Log and setup environment
        run:  |
          ./scripts/log-env.sh
          mkdir -p pvs-package
      - uses: actions/cache@v1
        id: cache-pvs
        with:
          path: pvs-package
          key: ${{ env.debfile }}
      - name:  Fetch PVS-Studio package
        if:    steps.cache-pvs.outputs.cache-hit != 'true'
        run:   wget "https://files.viva64.com/${debfile}" -O "pvs-package/pvs.deb"
      - name: Install packages
        run:  |
          set -xeu
          sudo apt-get install strace $(./scripts/list-build-dependencies.sh -m apt -c gcc)
          sudo dpkg -i "pvs-package/pvs.deb"
          pvs-studio-analyzer credentials "${{ secrets.PvsStudioName }}" "${{ secrets.PvsStudioKey }}"
      - name: Build
        run:  pvs-studio-analyzer trace -- ./scripts/build.sh -c gcc -t debug
      - name: Analyze
        run:  |
          set -xeu
          pvs-studio-analyzer analyze -o pvs-analysis.log -j "$(nproc)"
          plog-converter -a "64:1;OP:1,2,3;CS:1;MISRA:1,2" \
          -p "dosbox-staging" -v "${GITHUB_SHA:0:8}" -t "fullhtml" \
          -d "V1042" -o "pvs-analysis-report" "pvs-analysis.log"
      - name: Upload report
        uses: actions/upload-artifact@master
        with:
          name: pvs-analysis-report
          path: pvs-analysis-report

  dynamic_matrix:
    name: ${{ matrix.compiler }} dynamic sanitizers
    needs: run_linters
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [Clang, GCC]
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - run:  sudo apt-get update
      - name: Install C++ compiler and libraries
        env:
          VERSION_GCC: 9
          VERSION_Clang: 8
        run:  >
          sudo apt-get install -y $(./scripts/list-build-dependencies.sh -m apt
          -c ${{ matrix.compiler }} -v $VERSION_${{ matrix.compiler }})
      - name: Log environment
        run:  ./scripts/log-env.sh
      - name: Build and run sanitizers
        env:
          VERSION_GCC: 9
          VERSION_Clang: 8
          SANITIZERS_GCC: UASAN USAN TSAN
          SANITIZERS_Clang: USAN MSAN
        run: |
          ./.github/scripts/build-and-run-sanitizers.sh \
          ${{ matrix.compiler }} \
          $VERSION_${{ matrix.compiler }} \
          $SANITIZERS_${{ matrix.compiler }}
      - name: Upload logs
        uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.compiler }}-sanitizer-logs
          path: ${{ matrix.compiler }}-logs
