name: Code analysis

on: [push, pull_request]

env:
  CCACHE_DIR:      "/dev/shm/.ccache"
  CCACHE_MAXSIZE:  "64M"
  CCACHE_COMPRESS: "true"

jobs:
  run_linters:
    name: Script linters
    runs-on: ubuntu-20.04
    if: github.event_name != 'pull_request' || contains('dreamer,kcgen,ant-222,Wengier', github.actor) == false
    steps:
      - uses: actions/checkout@v2
      - run:  sudo apt-get update
      - name: Run shellcheck
        run:  ./scripts/verify-bash.sh
      - name: Install pylint
        run: |
          sudo apt-get install python3-setuptools
          sudo pip3 install pylint beautifulsoup4 html5lib
      - name: Run pylint
        run:  ./scripts/verify-python.sh
      - name: Install markdownlint
        run: |
          sudo apt-get install ruby-full
          ruby --version
          sudo gem install mdl
          sudo chmod go-w /usr/share/rust/.cargo/bin
      - name: Run markdownlint
        run:  ./scripts/verify-markdown.sh
      - name: Install appstream-util
        run:  sudo apt-get install appstream-util
      - name: Verify metainfo.xml
        run:  appstream-util validate-relax --nonet contrib/linux/dosbox-staging.metainfo.xml

  build_clang_static_analyser:
    name: Clang static analyzer
    runs-on: ubuntu-20.04
    needs: run_linters
    steps:
      - uses: actions/checkout@v2
      - run:  sudo apt-get update
      - name: Install C++ compiler and libraries
        run:  sudo apt-get install python3-setuptools $(./scripts/list-build-dependencies.sh -m apt -c gcc)
      - name: Install scan-build (Python version)
        run:  sudo pip3 install scan-build beautifulsoup4 html5lib

      - name:  Prepare compiler cache
        id:    prep-ccache
        shell: bash
        run: |
          mkdir -p "${CCACHE_DIR}"
          echo "::set-output name=dir::$CCACHE_DIR"
          echo "::set-output name=today::$(date -I)"
          echo "::set-output name=yesterday::$(date --date=yesterday -I)"
      - uses:  actions/cache@v2
        id:    cache-ccache
        with:
          path: ${{ steps.prep-ccache.outputs.dir }}
          key:  ccache-static-clang-${{ steps.prep-ccache.outputs.today }}
          restore-keys: |
            ccache-static-clang-${{ steps.prep-ccache.outputs.yesterday }}
      - name: Log environment
        run:  ./scripts/log-env.sh
      - name: Build
        run: |
          # build steps
          set -x
          g++ --version
          ./autogen.sh
          ./configure CC="ccache gcc" CXX="ccache g++"
          intercept-build make -j "$(nproc)"
      - name: Analyze
        run:  analyze-build -v -o report --html-title="dosbox-staging (${GITHUB_SHA:0:8})"
      - name: Upload report
        uses: actions/upload-artifact@v2
        with:
          name: clang-analysis-report
          path: report
      - name: Summarize report
        env:
          MAX_BUGS: 183
        run: |
          # summary
          echo "Full report is included in build Artifacts"
          echo
          ./scripts/count-clang-bugs.py report/*/index.html

  dynamic_matrix:
    name: ${{ matrix.conf.name }} dynamic sanitizers
    needs: run_linters
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        conf:
          - name: Clang
            sanitizers: USAN
            usan:  0  # cleared out in our existing tests
            uasan: -1
          - name: GCC
            # TSAN excluded, harness segfaults inside virual-X11 environment
            sanitizers: UASAN
            usan:  -1
            uasan: 4
    steps:
      - uses: actions/checkout@v2
      - run:  sudo apt-get update
      - name: Install C++ compiler and libraries
        env:
          VERSION_GCC: 9
          VERSION_Clang: 8
        run:  >
          sudo apt-get install -y $(./scripts/list-build-dependencies.sh -m apt
          -c ${{ matrix.conf.name }} -v $VERSION_${{ matrix.conf.name }})
      - name:  Prepare compiler cache
        id:    prep-ccache
        shell: bash
        run: |
          mkdir -p "${CCACHE_DIR}"
          echo "::set-output name=dir::$CCACHE_DIR"
          echo "::set-output name=today::$(date -I)"
          echo "::set-output name=yesterday::$(date --date=yesterday -I)"
      - uses:  actions/cache@v2
        id:    cache-ccache
        with:
          path: ${{ steps.prep-ccache.outputs.dir }}
          key:  ccache-sanitizers-${{ matrix.conf.name }}-${{ steps.prep-ccache.outputs.today }}
          restore-keys: |
            ccache-sanitizers-${{ matrix.conf.name }}-${{ steps.prep-ccache.outputs.yesterday }}
      - name: Log environment
        run:  ./scripts/log-env.sh
      - name: Build and run sanitizers
        env:
          VERSION_GCC: 9
          VERSION_Clang: 8
        run: |
          ./.github/scripts/build-and-run-sanitizers.sh \
            ${{ matrix.conf.name }} \
            $VERSION_${{ matrix.conf.name }} \
            ${{ matrix.conf.sanitizers }}
      - name: Upload logs
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.conf.name }}-sanitizer-logs
          path: ${{ matrix.conf.name }}-logs
      - name: Summarize issues
        env:
          USAN_LOG:  ${{ matrix.conf.name }}-logs/${{ matrix.conf.name }}-USAN-EnterExit.log.xz
          UASAN_LOG: ${{ matrix.conf.name }}-logs/${{ matrix.conf.name }}-UASAN-EnterExit.log.xz
        run: |
          # summary

          echo_bold () {
            echo -e "\\033[1m$*\\033[0m"
          }

          if [[ -f "$USAN_LOG" ]] ; then
            echo_bold "Undefined Behaviour sanitizer:"
            echo
            xzcat "$USAN_LOG" | MAX_ISSUES=${{ matrix.conf.usan }} ./scripts/count-xsan-issues.py -
          fi

          if [[ -f "$UASAN_LOG" ]] ; then
            echo_bold "Undefined Behaviour + Address sanitizers:"
            echo
            xzcat "$UASAN_LOG" | MAX_ISSUES=${{ matrix.conf.uasan }} ./scripts/count-xsan-issues.py -
          fi
