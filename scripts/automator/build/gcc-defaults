# Tool overrides
ar="gcc-ar${postfix}"
cc="${ccache}gcc${postfix}"
cxx="${ccache}g++${postfix}"
ld="gcc${postfix}"
ranlib="gcc-ranlib${postfix}"
cflags+=(-fdiagnostics-color=auto)

# ccache can cache GCC's preprocessor pass
if [[ -n "${ccache}" ]]; then 
	cflags+=(-fpch-preprocess)
fi

# Release-type additions
TYPES+=(release debug warnmore pgotrain fdotrain optinfo
        asan uasan usan tsan)

cflags_debug+=("${cflags[@]}" -g -fstack-protector -fno-omit-frame-pointer)
cxxonly_debug+=("${cxxonly[@]}" -Weffc++)

# Note: associative-math is needed for vectorization of floating point
#       calculations, which also relies on no-signed-zeros and
#       no-trapping-math.
cflags_release+=("${cflags[@]}" -DNDEBUG -O3 -fstrict-aliasing
                 -fno-signed-zeros -fno-trapping-math -fassociative-math
                 -frename-registers -ffunction-sections -fdata-sections)

cflags_warnmore+=("${cflags_debug[@]}" -pedantic -Wcast-align -Wdouble-promotion
                  -Wduplicated-branches -Wduplicated-cond -Wextra -Wformat=2
                  -Wlogical-op -Wmisleading-indentation -Wnull-dereference
                  -Wshadow -Wunused -fstrict-aliasing -Wstrict-aliasing=2
                  -Wextra-semi)
cxxonly_warnmore+=("${cxxonly_debug[@]}" -Wnon-virtual-dtor -Woverloaded-virtual
                   -Wuseless-cast)

cflags_pgotrain+=("${cflags_debug[@]}" -pg -ftree-vectorize)

cflags_fdotrain+=("${cflags[@]}" -DNDEBUG -g1 -fno-omit-frame-pointer)

cflags_optinfo+=("${cflags_release[@]}" -fopt-info-all
                 -ftree-vectorizer-verbose=6)

cflags_asan+=("${cflags_debug[@]}" -fsanitize=address)
ldflags_asan+=(-static-libasan)
cflags_uasan+=("${cflags_debug[@]}" -fsanitize=address,undefined
              -fsanitize-recover=signed-integer-overflow)
ldflags_uasan+=(-static-libasan)
cflags_usan+=("${cflags_debug[@]}" -fsanitize=undefined
              -fsanitize-recover=signed-integer-overflow)
cflags_tsan+=("${cflags_debug[@]}" -fsanitize=thread)

# Modifier additions
MODIFIERS=(lto fdo)
# Override the prior optimization flag because O2 does better w/ feedback 
cflags_fdo+=("-O2 -ftree-vectorize
              -fauto-profile=${FDO_FILE:-${repo_root}/current.afdo}")

cflags_lto+=(-flto)
ldflags_lto+=("${cflags[@]}" "-flto=$(( $(nproc) + 2 ))")
